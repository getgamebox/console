<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GameBox.Console</name>
    </assembly>
    <members>
        <member name="T:GameBox.Console.Application">
            <summary>
            An Application is the container for a collection of commands.
            It is the main entry point of a Console application.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.NamespaceSymbol">
            <summary>
            The namespace symbol.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.Unknow">
            <summary>
            The default application name or version.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.configurePolicies">
            <summary>
            The policies with configure.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.commands">
            <summary>
            The mapping for the command name or alias.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.defaultCommand">
            <summary>
            Default command executed when there is no command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.runningCommand">
            <summary>
            Indicates the command current running.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.dispatcher">
            <summary>
            The global event listener system.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.commandLoader">
            <summary>
            The command loader.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.definition">
            <summary>
            The <see cref="T:GameBox.Console.Input.InputDefinition"/> for this application.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.inited">
            <summary>
            Whether the application is initialize.
            </summary>
        </member>
        <member name="F:GameBox.Console.Application.wantHelps">
            <summary>
            Whether the command need helps.
            </summary>
        </member>
        <member name="M:GameBox.Console.Application.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Application"/> class.
            </summary>
            <param name="name">The name of the application.</param>
            <param name="version">The version of the application.</param>
        </member>
        <member name="P:GameBox.Console.Application.Name">
            <summary>
            Gets the name of the application.
            </summary>
        </member>
        <member name="P:GameBox.Console.Application.Version">
            <summary>
            Gets the version of the application.
            </summary>
        </member>
        <member name="P:GameBox.Console.Application.CatchExceptions">
            <summary>
            Gets or sets a value indicating whether needs catch the exceptions.
            </summary>
        </member>
        <member name="P:GameBox.Console.Application.Encoding">
            <summary>
            Gets or sets the input and output encoding.
            </summary>
        </member>
        <member name="M:GameBox.Console.Application.Run(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Runs the current application.
            </summary>
            <remarks>see: https://www.tldp.org/LDP/abs/html/exitcodes.html detail.</remarks>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
            <returns>Returns 0 if everything went fine, or an error code(1-255).</returns>
        </member>
        <member name="M:GameBox.Console.Application.GetLongVersion">
            <summary>
            Returns the long version of the application.
            </summary>
            <returns>The long version of the application.</returns>
        </member>
        <member name="M:GameBox.Console.Application.GetHelp">
            <summary>
            Gets the help message.
            </summary>
            <returns>The help message.</returns>
        </member>
        <member name="M:GameBox.Console.Application.SetName(System.String)">
            <summary>
            Sets the application name.
            </summary>
            <param name="name">The application name.</param>
        </member>
        <member name="M:GameBox.Console.Application.SetVersion(System.String)">
            <summary>
            Sets the application version.
            </summary>
            <param name="version">The application version.</param>
        </member>
        <member name="M:GameBox.Console.Application.SetDispatcher(GameBox.Console.EventDispatcher.IEventDispatcher)">
            <summary>
            Sets the global event listener system.
            </summary>
            <param name="eventDispatcher">The event listener system.</param>
        </member>
        <member name="M:GameBox.Console.Application.SetCommandLoader(GameBox.Console.Command.ICommandLoader)">
            <summary>
            Sets a loader to load the command.
            </summary>
            <param name="loader">The command loader.</param>
        </member>
        <member name="M:GameBox.Console.Application.SetDefaultCommand(System.String)">
            <summary>
            Sets default command executed when there is no command.
            </summary>
            <param name="command">The default command.</param>
            <returns>The <see cref="T:GameBox.Console.Application"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Application.SetDefinition(GameBox.Console.Input.InputDefinition)">
            <summary>
            Sets the global definition.
            </summary>
            <param name="definition">The definition.</param>
        </member>
        <member name="M:GameBox.Console.Application.AddConfigurePolicy(GameBox.Console.Policy.Configure.IConfigurePolicy)">
            <summary>
            Adds the configure policy.
            </summary>
            <param name="policy">The configure policy.</param>
        </member>
        <member name="M:GameBox.Console.Application.Register(System.String)">
            <summary>
            Registers a new command.
            </summary>
            <param name="name">The command name.</param>
            <returns>The command instance.</returns>
        </member>
        <member name="M:GameBox.Console.Application.Find(System.String)">
            <summary>
            Finds a command by name or alias.
            this command tries to find the best match if you give it an abbreviation.
            of a name or alias.
            </summary>
            <param name="name">The command name or alias.</param>
            <returns>The command instance.</returns>
        </member>
        <member name="M:GameBox.Console.Application.FindNamespace(System.String)">
            <summary>
            Finds a registered namespace by a name or an abbreviation.
            </summary>
            <param name="namespace">A namespace or abbreviation to search for.</param>
            <returns>A registered namespace.</returns>
            <exception cref="T:GameBox.Console.Exception.NamespaceNotFoundException">When namespace is incorrect or ambiguous.</exception>
        </member>
        <member name="M:GameBox.Console.Application.Get(System.String)">
            <summary>
            Gets an command by name or alias.
            </summary>
            <param name="name">The name or alias.</param>
            <returns>The command instance.</returns>
        </member>
        <member name="M:GameBox.Console.Application.GetNamespaces">
            <summary>
            Returns an array of all unique namespaces used by currently registered commands.
            </summary>
            <returns>An array of namespace.</returns>
        </member>
        <member name="M:GameBox.Console.Application.GetDefinition">
            <summary>
            Get the <see cref="T:GameBox.Console.Input.InputDefinition"/> related to this Application.
            </summary>
            <returns>The <see cref="T:GameBox.Console.Input.InputDefinition"/> for this Application.</returns>
        </member>
        <member name="M:GameBox.Console.Application.Has(System.String)">
            <summary>
            Check if the command exists.
            </summary>
            <param name="name">The name or alias.</param>
            <returns>True if the command exists, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Application.Add(GameBox.Console.Command.Command)">
            <summary>
            Adds a command instance.
            </summary>
            <remarks>
            If the command with the same name alreay exists, it will be overriden.
            If the command not enabled it wile be not added.
            </remarks>
            <param name="command">The command instance.</param>
            <returns>True if added.</returns>
        </member>
        <member name="M:GameBox.Console.Application.All(System.String)">
            <summary>
            Gets the commands in given namespace.
            </summary>
            <remarks>
            The tuple names are the full names or alias of the command.
            </remarks>
            <param name="namespace">The namespace.</param>
            <returns>An array of Command instances.</returns>
        </member>
        <member name="M:GameBox.Console.Application.ExtractNamespace(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns the namespace part of the command name.
            </summary>
            <param name="name">The command name.</param>
            <param name="limit">The maximum number of parts of the namespace.</param>
            <returns>The namespace part of the command name.</returns>
        </member>
        <member name="M:GameBox.Console.Application.DoRun(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Runs the current application.
            </summary>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
            <returns>int 0 if everything went fine, or an error code.</returns>
        </member>
        <member name="M:GameBox.Console.Application.GetCommandName(GameBox.Console.Input.IInput)">
            <summary>
            Gets the command name.
            </summary>
            <param name="input">The std input instance.</param>
            <returns>The command name.</returns>
        </member>
        <member name="M:GameBox.Console.Application.CreateDefaultInputDefinition">
            <summary>
            Gets the default input definition.
            </summary>
            <returns>An <see cref="T:GameBox.Console.Input.InputDefinition"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Application.GetDefaultCommands">
            <summary>
            Gets the default commands that should always be available.
            </summary>
            <returns>The default commands.</returns>
        </member>
        <member name="M:GameBox.Console.Application.DoRunCommand(GameBox.Console.Command.Command,GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Runs the current command.
            </summary>
            <param name="command">The current command.</param>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
            <returns>int 0 if everything went fine, or an error code.</returns>
        </member>
        <member name="M:GameBox.Console.Application.RenderException(System.Exception,GameBox.Console.Output.IOutput)">
            <summary>
            Renders a caught exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="output">The standard error instance.</param>
        </member>
        <member name="M:GameBox.Console.Application.DoRenderException(System.Exception,GameBox.Console.Output.IOutput)">
            <inheritdoc cref="M:GameBox.Console.Application.RenderException(System.Exception,GameBox.Console.Output.IOutput)"/>
        </member>
        <member name="M:GameBox.Console.Application.ExtractAllNamespace(System.String)">
            <summary>
            Returns all namespaces of the command name.
            </summary>
            <param name="name">The command name.</param>
            <returns>All namespace combination of the command name.</returns>
        </member>
        <member name="M:GameBox.Console.Application.ForamtDidYouMeanThis(System.String,System.String[],System.String)">
            <summary>
            Format the alternatives message.
            </summary>
            <param name="name">The name.</param>
            <param name="collection">An array of collection.</param>
            <param name="message">The output message.</param>
            <returns>The alternatives message.</returns>
        </member>
        <member name="M:GameBox.Console.Application.GetAbbreviationSuggestions(System.String[])">
            <summary>
            Returns abbreviated suggestions in string format.
            </summary>
            <param name="abbrevs">Abbreviated suggestions to convert.</param>
            <returns>A formatted string of abbreviated suggestions.</returns>
        </member>
        <member name="M:GameBox.Console.Application.FindAlternatives(System.String,System.String[])">
            <summary>
            Finds alternative of <paramref name="name"/> among <paramref name="collection"/>.
            </summary>
            <param name="name">The name.</param>
            <param name="collection">An array of collection.</param>
            <returns>A sorted array of similar string.</returns>
        </member>
        <member name="M:GameBox.Console.Application.ExecuteConfigurePolicy(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Configures the input and output instances based on the user arguments and options.
            </summary>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
        </member>
        <member name="M:GameBox.Console.Application.Initialize">
            <summary>
            Initialize the console application.
            </summary>
        </member>
        <member name="T:GameBox.Console.ApplicationEvents">
            <summary>
            Represents an application event.
            </summary>
        </member>
        <member name="F:GameBox.Console.ApplicationEvents.ConsoleError">
            <summary>
            An <see cref="T:GameBox.Console.Events.ConsoleErrorEventArgs"/> Indicates that the current console program has an error.
            </summary>
        </member>
        <member name="F:GameBox.Console.ApplicationEvents.ConsoleCommand">
            <summary>
            An <see cref="T:GameBox.Console.Events.ConsoleCommandEventArgs"/> Indicates that the current command to be executed.
            </summary>
        </member>
        <member name="F:GameBox.Console.ApplicationEvents.ConsoleTerminate">
            <summary>
            An <see cref="T:GameBox.Console.Events.ConsoleTerminateEventArgs"/> Indicates that the console will terminate.
            </summary>
        </member>
        <member name="T:GameBox.Console.Command.Command">
            <summary>
            Base class for all commands.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.ArgumentCommand">
            <summary>
            The argument command name.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.synopsis">
            <summary>
            The synopsis for the command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.usages">
            <summary>
            The command usage example.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.help">
            <summary>
            The original help for the command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.aliases">
            <summary>
            Alias for the command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.applicationDefinitionMerged">
            <summary>
            Is merged definition from application definition.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.applicationDefinitionMergedWithArguments">
            <summary>
            Is merged definition from application definition with arguments.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.ignoreValidationErrors">
            <summary>
            Whether ignore validation errors for the command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.commandEnvironmentalPreparation">
            <summary>
            Whether the command environment is ready to be completed.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.inited">
            <summary>
            Whether the command is inited.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.code">
            <summary>
            A code closure that fires when the command is called.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.Command.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Command.Command"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.Command.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Command.Command"/> class.
            </summary>
            <param name="name">The command name.</param>
        </member>
        <member name="T:GameBox.Console.Command.Command.SynopsisDetailLevels">
            <summary>
            Detail level of synopsis.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.SynopsisDetailLevels.Short">
            <summary>
            Short version of the synopsis (without options).
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.Command.SynopsisDetailLevels.Long">
            <summary>
            Full version of the synopsis.
            </summary>
        </member>
        <member name="P:GameBox.Console.Command.Command.Application">
            <summary>
            Gets console application.
            </summary>
        </member>
        <member name="P:GameBox.Console.Command.Command.Name">
            <summary>
            Gets current command name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Command.Command.Description">
            <summary>
            Gets description for the command.
            </summary>
        </member>
        <member name="P:GameBox.Console.Command.Command.Help">
            <summary>
            Gets help for the command.
            </summary>
        </member>
        <member name="P:GameBox.Console.Command.Command.IsHidden">
            <summary>
            Gets a value indicating whether the command should be publicly shown or not.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetDefinition">
            <summary>
            Gets defined command line arguments and options.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.Command.Run(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Runs the command.
            The code to execute defined by overriding the <see cref="M:GameBox.Console.Command.Command.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)"/> method in a sub-class.
            </summary>
            <param name="input">The std input object.</param>
            <param name="output">The std output object.</param>
            <returns>The exit code.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetAliases">
            <summary>
            Gets aliases for the command.
            </summary>
            <returns>An array of the aliases.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetUsages">
            <summary>
            Gets the command usage example.
            </summary>
            <returns>The command usage example.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetSynopsis(System.Boolean)">
            <summary>
            Returns the synopsis for the command.
            </summary>
            <param name="isShort">Whether to show the short version of the synopsis (without options) or not.</param>
            <returns>The synopsis for the command.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetName(System.String)">
            <summary>
            Sets the name of the command.
            </summary>
            <param name="name">The command name.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetApplication(GameBox.Console.Application)">
            <summary>
            Sets console application of the command.
            </summary>
            <param name="application">The console application.</param>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetDefinition(GameBox.Console.Input.IInputDefinition[])">
            <summary>
            Sets an array of <see cref="T:GameBox.Console.Input.InputArgument"/> and <see cref="T:GameBox.Console.Input.InputOption"/> instances or a <see cref="T:GameBox.Console.Input.InputDefinition"/> instance.
            </summary>
            <param name="definitions">An array of argument and option instances or a definition instance.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetDescription(System.String)">
            <summary>
            Sets description for the command.
            </summary>
            <param name="description">The description for the command.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetHelp(System.String)">
            <summary>
            Sets help for the command.
            </summary>
            <param name="helpMessage">The help for the command.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetAlias(System.String[])">
            <summary>
            Sets the aliases for the command.
            </summary>
            <param name="aliasNames">Alias for the command.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.AddUsage(System.String)">
            <summary>
            Adds the command usage.
            </summary>
            <param name="usage">The command usage.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.AddArgument(System.String,GameBox.Console.Input.InputArgumentModes,System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Adds an argument.
            </summary>
            <param name="name">The argument name.</param>
            <param name="mode">The argument mode.</param>
            <param name="description">A description text.</param>
            <param name="defaultValue">The default value(<see cref="F:GameBox.Console.Input.InputArgumentModes.Optional"/> mode only).</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.AddOption(System.String,System.String,GameBox.Console.Input.InputOptionModes,System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Adds an option.
            </summary>
            <param name="name">The option name.</param>
            <param name="shortcut">The shortcuts, can be null, a string of shortcuts delimited by | or an array of shortcuts.</param>
            <param name="mode">The option mode.</param>
            <param name="description">A description text.</param>
            <param name="defaultValue">The default value(must be null for <see cref="F:GameBox.Console.Input.InputOptionModes.ValueNone"/>).</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetCode(System.Func{GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput,System.Int32})">
            <summary>
            Sets the code closure.
            </summary>
            <param name="func">The code closure.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetCode(System.Action)">
            <summary>
            Sets the code closure.
            </summary>
            <param name="action">The code closure.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.SetCode(System.Action{GameBox.Console.Output.IOutput})">
            <summary>
            Sets the code closure.
            </summary>
            <param name="action">The code closure.</param>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.IgnoreValidationErrors">
            <summary>
            Ignore validation errors for the command.
            </summary>
            <returns>Returns the <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.BuildEnvironmentalPreparation(GameBox.Console.Input.IInput)">
            <summary>
            Build a command execution environment.
            </summary>
            <param name="input">The std input instance.</param>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetOriginalDefinition">
            <summary>
            Gets the <see cref="T:GameBox.Console.Input.InputDefinition"/> to be used to create representations of this Command.
            </summary>
            <remarks>The <see cref="M:GameBox.Console.Command.Command.GetDefinition"/> changed by merging with the application. So this method return the original command representation.</remarks>
            <returns>The original definition.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.MergeApplicationDefinition(System.Boolean)">
            <summary>
            Merges the application definition with the command definition.
            </summary>
            <param name="mergeArguments">Whether to merge or not the Application definition arguments to command definition arguments.</param>
        </member>
        <member name="M:GameBox.Console.Command.Command.Initialize">
            <summary>
            Initialize the command.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.Command.Configure">
            <summary>
            Configures the command.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetProcessedHelp">
            <summary>
            Returns the processed help for the command.
            </summary>
            <returns>The processed help.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.Initialize(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            <para>Initializes the command after the input has been bound and before the input is validated.</para>
            <seealso cref="M:GameBox.Console.Input.IInput.Bind(GameBox.Console.Input.InputDefinition)"/>
            <seealso cref="M:GameBox.Console.Input.IInput.Validate"/>
            </summary>
            <param name="input">The std input object.</param>
            <param name="output">The std output object.</param>
        </member>
        <member name="M:GameBox.Console.Command.Command.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Executes the command.
            </summary>
            <remarks>
            This method is not abstract because you can use this class
            as a concrete class. In this case, instead of defining the
            <see cref="M:GameBox.Console.Command.Command.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)"/> method, you set the
            code to execute by passing a Closure to the
            <see cref="M:GameBox.Console.Command.Command.SetCode(System.Action)"/> method.
            </remarks>
            <param name="input">The std input object.</param>
            <param name="output">The std output object.</param>
            <returns>0 if everything went fine, or an error code.</returns>
        </member>
        <member name="M:GameBox.Console.Command.Command.Interact(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Interacts with the user.
            This method is executed after the <see cref="M:GameBox.Console.Command.Command.Initialize"/> and before the input is validated.
            <para>This means that this is the only place where the command can interactively ask for values of missing required arguments.</para>
            <seealso cref="M:GameBox.Console.Input.IInput.Validate"/>
            </summary>
            <param name="input">The std input object.</param>
            <param name="output">The std output object.</param>
        </member>
        <member name="M:GameBox.Console.Command.Command.ValidateName(System.String)">
            <summary>
            Validates a command name.
            It must be non-empty and a-z,A-Z,0-9,-.
            </summary>
            <param name="name">The command name.</param>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetName">
            <summary>
            Get the command name.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.Command.GetDescription">
            <summary>
            Get the command description.
            </summary>
        </member>
        <member name="T:GameBox.Console.Command.CommandHelp">
            <summary>
            <see cref="T:GameBox.Console.Command.CommandHelp"/> displays the help for a given command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.CommandHelp.command">
            <summary>
            Command that needs help.
            </summary>
        </member>
        <member name="P:GameBox.Console.Command.CommandHelp.Name">
            <summary>
            Gets the command name.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.CommandHelp.SetCommand(GameBox.Console.Command.Command)">
            <inheritdoc cref="F:GameBox.Console.Command.CommandHelp.command"/>
            <param name="command">The command needs help.</param>
        </member>
        <member name="M:GameBox.Console.Command.CommandHelp.Configure">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Command.CommandHelp.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Command.CommandList">
            <summary>
            CommandList displays the list of all available commands for the application.
            </summary>
        </member>
        <member name="P:GameBox.Console.Command.CommandList.Name">
            <summary>
            Gets the command name.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.CommandList.Configure">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Command.CommandList.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Command.FactoryCommandLoader">
            <summary>
            A simple command loader. It will instantiate commands lazily.
            </summary>
        </member>
        <member name="F:GameBox.Console.Command.FactoryCommandLoader.factories">
            <summary>
            The command mapping.
            </summary>
        </member>
        <member name="M:GameBox.Console.Command.FactoryCommandLoader.#ctor(System.Collections.Generic.IDictionary{System.String,System.Func{GameBox.Console.Command.Command}})">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Command.FactoryCommandLoader"/> class.
            </summary>
            <param name="factories">The command factories.</param>
        </member>
        <member name="M:GameBox.Console.Command.FactoryCommandLoader.Load(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Command.FactoryCommandLoader.Has(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Command.FactoryCommandLoader.GetNames">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Command.ICommandLoader">
            <summary>
            <see cref="T:GameBox.Console.Command.ICommandLoader"/> is the interface implemented by all command loader classes.
            </summary>
            <remarks>
            The motivation behind <see cref="T:GameBox.Console.Command.ICommandLoader"/> is lazy-loading,
            it only maps command names to command factories, which means it
            can't use <see cref="M:GameBox.Console.Command.Command.GetAliases"/> as it does not deal with
            command instances. Thus, if you try to run a command by using
            some:alias where some:alias is defined via <see cref="M:GameBox.Console.Command.Command.SetAlias(System.String[])"/>()
            in the command, the command won't be resolved and you will get
            a <see cref="T:GameBox.Console.Exception.CommandNotFoundException"/>.
            </remarks>
        </member>
        <member name="M:GameBox.Console.Command.ICommandLoader.Load(System.String)">
            <summary>
            Loads a command.
            </summary>
            <param name="name">The name for command.</param>
            <returns>The <see cref="T:GameBox.Console.Command.Command"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Command.ICommandLoader.Has(System.String)">
            <summary>
            Checks if a command exists.
            </summary>
            <param name="name">The name for command.</param>
            <returns>true if the <see cref="T:GameBox.Console.Command.Command"/> object exists, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Command.ICommandLoader.GetNames">
            <summary>
            Get all registered command names(not include alias).
            </summary>
            <returns>All registered command names.</returns>
        </member>
        <member name="T:GameBox.Console.Descriptor.AbstractDescriptor">
            <summary>
            <see cref="T:GameBox.Console.Descriptor.AbstractDescriptor"/> is the base class for all descriptor classes.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.AbstractDescriptor.RawText">
            <summary>
            The raw text option key.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.AbstractDescriptor.RawOutput">
            <summary>
            The raw ouput option key.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.AbstractDescriptor.Namespace">
            <summary>
            The namespace option key.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.AbstractDescriptor.Output">
            <summary>
            Gets the std output instance.
            </summary>
        </member>
        <member name="M:GameBox.Console.Descriptor.AbstractDescriptor.Describe(GameBox.Console.Output.IOutput,System.Object,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes an object if supported.
            </summary>
            <param name="output">The std output instance.</param>
            <param name="content">The described object.</param>
            <param name="options">The described options.</param>
        </member>
        <member name="M:GameBox.Console.Descriptor.AbstractDescriptor.Write(System.String,System.Boolean)">
            <summary>
            Writes message to output.
            </summary>
            <param name="message">The message content.</param>
            <param name="decorated">True if the <see cref="F:GameBox.Console.Output.OutputOptions.OutputNormal"/>, otherwise <see cref="F:GameBox.Console.Output.OutputOptions.OutputRaw"/>.</param>
        </member>
        <member name="M:GameBox.Console.Descriptor.AbstractDescriptor.DescribeInputDefinition(GameBox.Console.Input.InputDefinition,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes a <see cref="T:GameBox.Console.Input.InputDefinition"/> instance.
            </summary>
            <param name="definition">The definition instance.</param>
            <param name="options">The described options.</param>
        </member>
        <member name="M:GameBox.Console.Descriptor.AbstractDescriptor.DescribeInputOption(GameBox.Console.Input.InputOption,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes a <see cref="T:GameBox.Console.Input.InputOption"/> instance.
            </summary>
            <param name="inputOption">The option instance.</param>
            <param name="options">The described options.</param>
        </member>
        <member name="M:GameBox.Console.Descriptor.AbstractDescriptor.DescribeInputArgument(GameBox.Console.Input.InputArgument,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes a <see cref="T:GameBox.Console.Input.InputArgument"/> instance.
            </summary>
            <param name="argument">The argument instance.</param>
            <param name="options">The described options.</param>
        </member>
        <member name="M:GameBox.Console.Descriptor.AbstractDescriptor.DescribeCommand(GameBox.Console.Command.Command,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes a <see cref="T:GameBox.Console.Command.Command"/> instance.
            </summary>
            <param name="command">The command instance.</param>
            <param name="options">The described options.</param>
        </member>
        <member name="M:GameBox.Console.Descriptor.AbstractDescriptor.DescribeApplication(GameBox.Console.Application,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes a <see cref="T:GameBox.Console.Application"/> instance.
            </summary>
            <param name="application">The application instance.</param>
            <param name="options">The described options.</param>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptionApplication">
            <summary>
            The application description classes.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptionApplication.GlobalNamespace">
            <summary>
            The global namespace id.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptionApplication.application">
            <summary>
            The application instance.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptionApplication.namespace">
            <summary>
            The specified namespace.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptionApplication.showHidden">
            <summary>
            Whether the command should be publicly shown or not.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptionApplication.namespaces">
            <summary>
            The generted namespace.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptionApplication.commands">
            <summary>
            The generted commands.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptionApplication.aliases">
            <summary>
            The commands aliases.
            </summary>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptionApplication.#ctor(GameBox.Console.Application,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Descriptor.DescriptionApplication"/> class.
            </summary>
            <param name="application">The application instance.</param>
            <param name="namespace">The specified namespace.</param>
            <param name="showHidden">Whether the command should be publicly shown or not.</param>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptionApplication.GetCommandsExcludeAliases">
            <summary>
            Return the commands, Exclude aliases.
            </summary>
            <returns>The command array.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptionApplication.GetCommand(System.String)">
            <summary>
            Return the specified command.
            </summary>
            <param name="name">The name or alias.</param>
            <returns>The specified command.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptionApplication.GetNamespaces">
            <summary>
            Return to the namespace and the list of commands under the namespace.
            </summary>
            <remarks>The command name list include the command aliases name.</remarks>
            <returns>The namespace result array.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptionApplication.SortCommands(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,GameBox.Console.Command.Command}})">
            <summary>
            Sorted the commands. according to namespace and name.
            </summary>
            <param name="items">The command array.</param>
            <returns>The sorted namespace and commands.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptionApplication.InspectApplication">
            <summary>
            Inspect the command.
            </summary>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptorJson">
            <summary>
            Json descriptor.
            </summary>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.DescribeInputDefinition(GameBox.Console.Input.InputDefinition,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.DescribeInputOption(GameBox.Console.Input.InputOption,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.DescribeInputArgument(GameBox.Console.Input.InputArgument,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.DescribeCommand(GameBox.Console.Command.Command,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.DescribeApplication(GameBox.Console.Application,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.GetInputArgumentData(GameBox.Console.Input.InputArgument)">
            <summary>
            Gets the input argument serialize class.
            </summary>
            <param name="argument">The argument instance.</param>
            <returns>The serialize class.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.GetInputOptionData(GameBox.Console.Input.InputOption)">
            <summary>
            Gets the input option serialize class.
            </summary>
            <param name="option">The option instance.</param>
            <returns>The serialize class.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.GetInputDefinitionData(GameBox.Console.Input.InputDefinition)">
            <summary>
            Gets the intput definition serialize class.
            </summary>
            <param name="definition">The input definition.</param>
            <returns>The serialize class.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.GetCommandData(GameBox.Console.Command.Command)">
            <summary>
            Gets the command serialize class.
            </summary>
            <param name="command">The command instance.</param>
            <returns>The command serialize class.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorJson.WriteData(System.Object)">
            <summary>
            Write the serialize class in output.
            </summary>
            <param name="data">The serialize class.</param>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptorJson.InputArgumentData">
            <summary>
            <see cref="T:GameBox.Console.Input.InputArgument"/> serialize class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputArgumentData.Name">
            <summary>
            Gets or sets the argument name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputArgumentData.IsRequired">
            <summary>
            Gets or sets a value indicating whether the argument is required.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputArgumentData.IsArray">
            <summary>
            Gets or sets a value indicating whether the argument is array.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputArgumentData.Description">
            <summary>
            Gets or sets the argument description.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputArgumentData.Default">
            <summary>
            Gets or sets the argument default value.
            </summary>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptorJson.InputOptionData">
            <summary>
            <see cref="T:GameBox.Console.Input.InputOption" /> serialize class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputOptionData.Name">
            <summary>
            Gets or sets the option name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputOptionData.Shortcut">
            <summary>
            Gets or sets the option shortcut.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputOptionData.IsValueAccept">
            <summary>
            Gets or sets a value indicating whether the value is accept.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputOptionData.IsValueRequired">
            <summary>
             Gets or sets a value indicating whether the value is required.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputOptionData.IsArray">
            <summary>
            Gets or sets a value indicating whether the option is array.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputOptionData.Description">
            <summary>
            Gets or sets the option description.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputOptionData.Default">
            <summary>
            Gets or sets the argument default value.
            </summary>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptorJson.InputDefinitionData">
            <summary>
            <see cref="T:GameBox.Console.Input.InputDefinition" /> serialize class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputDefinitionData.Arguments">
            <summary>
            Gets or sets an array of the arguments.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.InputDefinitionData.Options">
            <summary>
            Gets or sets an array of the options.
            </summary>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptorJson.CommandData">
            <summary>
            <see cref="T:GameBox.Console.Command.Command" /> serialize class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.CommandData.Name">
            <summary>
            Gets or sets the command name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.CommandData.Usage">
            <summary>
            Gets or sets the command usage.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.CommandData.Help">
            <summary>
            Gets or sets the command processed help.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.CommandData.Description">
            <summary>
            Gets or sets the command description.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.CommandData.Definition">
            <summary>
            Gets or sets the command definition.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.CommandData.IsHidden">
            <summary>
            Gets or sets a value indicating whether the command is hidden.
            </summary>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptorJson.ApplicationData">
            <summary>
            <see cref="T:GameBox.Console.Application"/> serialize class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.ApplicationData.Name">
            <summary>
            Gets or sets the application name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.ApplicationData.Version">
            <summary>
            Gets or sets the application version.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.ApplicationData.Commands">
            <summary>
            Gets or sets the application commands.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.ApplicationData.Namespace">
            <summary>
            Gets or sets the application current namespaces.
            </summary>
        </member>
        <member name="P:GameBox.Console.Descriptor.DescriptorJson.ApplicationData.Namespaces">
            <summary>
            Gets or sets the application sub namespaces(including itself).
            </summary>
        </member>
        <member name="T:GameBox.Console.Descriptor.DescriptorText">
            <summary>
            Text descriptor.
            </summary>
        </member>
        <member name="F:GameBox.Console.Descriptor.DescriptorText.KeyTotalWidth">
            <summary>
            The total width option key.
            </summary>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.DescribeInputDefinition(GameBox.Console.Input.InputDefinition,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.DescribeInputOption(GameBox.Console.Input.InputOption,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.DescribeInputArgument(GameBox.Console.Input.InputArgument,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.DescribeCommand(GameBox.Console.Command.Command,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.DescribeApplication(GameBox.Console.Application,GameBox.Console.Util.Mixture[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.TotalWidth(System.Int32)">
            <summary>
            Sets the total width option.
            </summary>
            <param name="width">The total width.</param>
            <returns>The option.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.GetCommandAliasesText(GameBox.Console.Command.Command)">
            <summary>
            Gets the command aliases text.
            </summary>
            <param name="command">The command instance.</param>
            <returns>The command aliases text.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.CalculateTotalWidthForOptions(GameBox.Console.Input.InputOption[])">
            <summary>
            Calculate the total buffer width for options.
            </summary>
            <param name="options">The options.</param>
            <returns>The total buffer width.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.CalculateColumnWidth(System.Collections.Generic.IEnumerable{GameBox.Console.Command.Command})">
            <summary>
            Calculate the command column width.
            </summary>
            <param name="commands">The command array.</param>
            <returns>The column width.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.FormatDefaultValue(GameBox.Console.Util.Mixture)">
            <summary>
            Formats input option/argument default value.
            </summary>
            <param name="value">The default value.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:GameBox.Console.Descriptor.DescriptorText.Write(System.String,GameBox.Console.Util.Mixture[])">
            <summary>
            Output the message with options.
            </summary>
            <param name="message">The message content.</param>
            <param name="options">The message options.</param>
        </member>
        <member name="T:GameBox.Console.Descriptor.IDescriptor">
            <summary>
            Descriptor interface for console output.
            </summary>
        </member>
        <member name="M:GameBox.Console.Descriptor.IDescriptor.Describe(GameBox.Console.Output.IOutput,System.Object,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes an object if supported.
            </summary>
            <param name="output">The std output instance.</param>
            <param name="content">The described object.</param>
            <param name="options">The described option.</param>
        </member>
        <member name="T:GameBox.Console.EnvironmentVariables">
            <summary>
            The environment variables with console.
            </summary>
        </member>
        <member name="F:GameBox.Console.EnvironmentVariables.ConsoleShellInteractive">
            <summary>
            True or False indicates whether to interact with the user.
            </summary>
        </member>
        <member name="F:GameBox.Console.EnvironmentVariables.ConsoleShellVerbosity">
            <summary>
            -1 to 3 indicates the level of detail of the output.
            </summary>
            <remarks>
            -1 means silent(quiet) output.
            0 means normal output.
            1 means detail output.
            2 means very detail output.
            3 means debug output.
            </remarks>
        </member>
        <member name="F:GameBox.Console.EnvironmentVariables.ConsoleBufferWidth">
            <summary>
            Console screen bufferd width.
            </summary>
        </member>
        <member name="F:GameBox.Console.EnvironmentVariables.ConsoleBufferHeight">
            <summary>
            Console screen bufferd height.
            </summary>
        </member>
        <member name="T:GameBox.Console.EventDispatcher.EventDispatcher">
            <summary>
            The event dispatcher.
            </summary>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.EventDispatcher.EventDispatcher"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.HasListener(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.Dispatch(System.String,System.Object,System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.AddListener(System.String,System.EventHandler)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.RemoveListener(System.String,System.EventHandler)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.AddSubscriber(GameBox.Console.EventDispatcher.IEventSubscriber)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.RemoveSubscriber(GameBox.Console.EventDispatcher.IEventSubscriber)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.GetListeners(System.String,System.EventArgs)">
            <summary>
            Retrieves all listeners for a given event.
            </summary>
            <param name="eventName">The event name.</param>
            <param name="eventArgs">The event args instance.</param>
            <returns>An list of the event handler instance.</returns>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.PushEventStack(System.String)">
            <summary>
            Push into the event stack to avoid relying on loop calls.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.PopEventStack(System.String)">
            <summary>
            Pops the active event from the stack.
            </summary>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.EventDispatcher.GetEventStackDebugMessage">
            <summary>
            Gets the debug message of the event stack.
            </summary>
            <returns>Returns the debug message.</returns>
        </member>
        <member name="T:GameBox.Console.EventDispatcher.IEventDispatcher">
            <summary>
            The <see cref="T:GameBox.Console.EventDispatcher.IEventDispatcher"/> is event listener system.
            Listeners are registered on the manager and events are dispatched through the manager.
            </summary>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.IEventDispatcher.HasListener(System.String)">
            <summary>
            Checks whether an event has any registered listeners.
            </summary>
            <param name="eventName">The name of the event.</param>
            <returns>true if the specified event has any listeners, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.IEventDispatcher.Dispatch(System.String,System.Object,System.EventArgs)">
            <summary>
            Dispatches an event to all registered listeners.
            </summary>
            <remarks>
            If the event name is null or empty, then no events will be fired and
            no exception will be thrown.
            </remarks>
            <param name="eventName">The name of the event.</param>
            <param name="sender">The sender instance.</param>
            <param name="eventArgs">The event to pass to the event handlers/listeners.</param>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.IEventDispatcher.AddListener(System.String,System.EventHandler)">
            <summary>
            Adds an event listener that listens on the specified event.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="listener">The listener.</param>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.IEventDispatcher.RemoveListener(System.String,System.EventHandler)">
            <summary>
            Removes an event listener from the specified event.
            </summary>
            <param name="eventName">The name of the event.</param>
            <param name="listener">The specified listener to removed. Removed all listener if given null.</param>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.IEventDispatcher.AddSubscriber(GameBox.Console.EventDispatcher.IEventSubscriber)">
            <summary>
            Adds object methods as listeners for the events in GetSubscribedEvents.
            </summary>
            <param name="subscriber">The subscriber instance.</param>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.IEventDispatcher.RemoveSubscriber(GameBox.Console.EventDispatcher.IEventSubscriber)">
            <summary>
            Removes object methods as listeners for the events in GetSubscribedEvents.
            </summary>
            <param name="subscriber">The subscriber instance.</param>
        </member>
        <member name="T:GameBox.Console.EventDispatcher.IEventSubscriber">
            <summary>
            Represents an event subscriber.
            </summary>
        </member>
        <member name="M:GameBox.Console.EventDispatcher.IEventSubscriber.GetSubscribedEvents">
            <summary>
            Gets an mapping of event names this subscriber wants to listen to.
            </summary>
            <returns>Returns an mapping of event names this subscriber wants to listen to.</returns>
        </member>
        <member name="T:GameBox.Console.EventDispatcher.IStoppableEvent">
            <summary>
            An event whose processing may be interrupted when the event has been handled.
            </summary>
        </member>
        <member name="P:GameBox.Console.EventDispatcher.IStoppableEvent.IsPropagationStopped">
            <summary>
            Gets a value indicating whether propagation stopped.
            </summary>
        </member>
        <member name="T:GameBox.Console.Events.ConsoleCommandEventArgs">
            <summary>
            Allows to do things before the command is executed, like skipping the command or changing the input.
            </summary>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleCommandEventArgs.#ctor(GameBox.Console.Command.Command,GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Events.ConsoleCommandEventArgs"/> class.
            </summary>
            <param name="command">The command instance.</param>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
        </member>
        <member name="P:GameBox.Console.Events.ConsoleCommandEventArgs.SkipCommand">
            <summary>
            Gets a value indicating whether true if skipped commands.
            </summary>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleCommandEventArgs.SetSkipCommand(System.Boolean)">
            <summary>
            Sets whether skip execute command.
            </summary>
            <param name="skipped">Whether is skip execute the command.</param>
        </member>
        <member name="T:GameBox.Console.Events.ConsoleErrorEventArgs">
            <summary>
            Allows to handle exception thrown while running a command.
            </summary>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleErrorEventArgs.#ctor(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput,System.Exception,GameBox.Console.Command.Command)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Events.ConsoleErrorEventArgs"/> class.
            </summary>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
            <param name="exception">The exception instance.</param>
            <param name="command">The command instance.</param>
        </member>
        <member name="P:GameBox.Console.Events.ConsoleErrorEventArgs.Exception">
            <summary>
            Gets the handle exception.
            </summary>
        </member>
        <member name="P:GameBox.Console.Events.ConsoleErrorEventArgs.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleErrorEventArgs.SetException(System.Exception)">
            <summary>
            Sets the exception.
            </summary>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleErrorEventArgs.SetExitCode(System.Int32)">
            <summary>
            Sets the exception exit code.
            </summary>
            <param name="code">The exit code.</param>
        </member>
        <member name="T:GameBox.Console.Events.ConsoleEventArgs">
            <summary>
            Allows to inspect input and output of a command.
            </summary>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleEventArgs.#ctor(GameBox.Console.Command.Command,GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Events.ConsoleEventArgs"/> class.
            </summary>
            <param name="command">The command to trigger an event.</param>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
        </member>
        <member name="P:GameBox.Console.Events.ConsoleEventArgs.Command">
            <summary>
            Gets the command to trigger an event.
            </summary>
        </member>
        <member name="P:GameBox.Console.Events.ConsoleEventArgs.Input">
            <summary>
            Gets the std input instance.
            </summary>
        </member>
        <member name="P:GameBox.Console.Events.ConsoleEventArgs.Output">
            <summary>
            Gets the std output instance.
            </summary>
        </member>
        <member name="T:GameBox.Console.Events.ConsoleTerminateEventArgs">
            <summary>
            Allows to manipulate the exit code of a command after its execution.
            </summary>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleTerminateEventArgs.#ctor(GameBox.Console.Command.Command,GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Events.ConsoleTerminateEventArgs"/> class.
            </summary>
            <param name="command">The command instance.</param>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instnace.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="P:GameBox.Console.Events.ConsoleTerminateEventArgs.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="M:GameBox.Console.Events.ConsoleTerminateEventArgs.SetExitCode(System.Int32)">
            <summary>
            Sets the exception exit code.
            </summary>
            <param name="code">The exit code.</param>
        </member>
        <member name="T:GameBox.Console.Exception.CommandNotFoundException">
            <summary>
            When the command not found.
            </summary>
        </member>
        <member name="F:GameBox.Console.Exception.CommandNotFoundException.alternatives">
            <summary>
            The command alternatives.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.CommandNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.CommandNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.CommandNotFoundException.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.CommandNotFoundException"/> class.
            </summary>
            <param name="alternatives">The command alternatives.</param>
        </member>
        <member name="M:GameBox.Console.Exception.CommandNotFoundException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.CommandNotFoundException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="alternatives">The command alternatives.</param>
        </member>
        <member name="M:GameBox.Console.Exception.CommandNotFoundException.#ctor(System.String,System.Exception,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.CommandNotFoundException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
            <param name="alternatives">The command alternatives.</param>
        </member>
        <member name="M:GameBox.Console.Exception.CommandNotFoundException.GetAlternatives">
            <summary>
            Gets the command alternatives.
            </summary>
            <returns>The command alternatives.</returns>
        </member>
        <member name="T:GameBox.Console.Exception.ConsoleException">
            <summary>
            Generic exception class for console application.
            </summary>
        </member>
        <member name="F:GameBox.Console.Exception.ConsoleException.exitCode">
            <summary>
            The exit code.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="exitCode">The exit code.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="P:GameBox.Console.Exception.ConsoleException.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="T:GameBox.Console.Exception.ConsoleLogicException">
            <summary>
            Generic logic exception class for console application.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleLogicException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleLogicException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleLogicException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleLogicException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleLogicException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleLogicException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleLogicException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleLogicException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleLogicException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleLogicException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="exitCode">The exit code.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="T:GameBox.Console.Exception.ConsoleRuntimeException">
            <summary>
            Console runtime exception, throwing this exception program all operations that allow the try class should terminate.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleRuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleRuntimeException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleRuntimeException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleRuntimeException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleRuntimeException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="exitCode">The exit code.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleRuntimeException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ConsoleRuntimeException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ConsoleRuntimeException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="exitCode">The exit code.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="T:GameBox.Console.Exception.IException">
            <summary>
            Base interface for all exception.
            </summary>
        </member>
        <member name="P:GameBox.Console.Exception.IException.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="T:GameBox.Console.Exception.InvalidArgumentException">
            <summary>
            The input parameter is invalid.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.InvalidArgumentException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.InvalidArgumentException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.InvalidArgumentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.InvalidArgumentException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
        </member>
        <member name="M:GameBox.Console.Exception.InvalidArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.InvalidArgumentException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="M:GameBox.Console.Exception.InvalidArgumentException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.InvalidArgumentException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="paramName">Which parameter throws an exception.</param>
        </member>
        <member name="M:GameBox.Console.Exception.InvalidArgumentException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.InvalidArgumentException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="paramName">Which parameter throws an exception.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="P:GameBox.Console.Exception.InvalidArgumentException.ExitCode">
            <summary>
            Gets the exit code.
            </summary>
        </member>
        <member name="T:GameBox.Console.Exception.NamespaceNotFoundException">
            <summary>
            When the namespace not found.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.NamespaceNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.NamespaceNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.NamespaceNotFoundException.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.NamespaceNotFoundException"/> class.
            </summary>
            <param name="alternatives">The namespace alternatives.</param>
        </member>
        <member name="M:GameBox.Console.Exception.NamespaceNotFoundException.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.NamespaceNotFoundException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="alternatives">The namespace alternatives.</param>
        </member>
        <member name="M:GameBox.Console.Exception.NamespaceNotFoundException.#ctor(System.String,System.Exception,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.NamespaceNotFoundException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
            <param name="alternatives">The namespace alternatives.</param>
        </member>
        <member name="T:GameBox.Console.Exception.ParseException">
            <summary>
            Generic exception class for command line parse.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ParseException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ParseException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ParseException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="T:GameBox.Console.Exception.ValidationException">
            <summary>
            The command line input parameter validation failed.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ValidationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ValidationException"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Exception.ValidationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ValidationException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
        </member>
        <member name="M:GameBox.Console.Exception.ValidationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Exception.ValidationException"/> class.
            </summary>
            <param name="message">The exception message as a single string.</param>
            <param name="innerException">The exception as a inner exception.</param>
        </member>
        <member name="T:GameBox.Console.ExitCodes">
            <summary>
            Exit code.
            </summary>
        </member>
        <member name="F:GameBox.Console.ExitCodes.Normal">
            <summary>
            The normal exit.
            </summary>
        </member>
        <member name="F:GameBox.Console.ExitCodes.GeneralException">
            <summary>
            The unknow(general) exception exit.
            </summary>
        </member>
        <member name="F:GameBox.Console.ExitCodes.SkipCommnad">
            <summary>
            The return code for skipped commands, this will also be passed into the terminate event.
            </summary>
        </member>
        <member name="T:GameBox.Console.Formatter.IOutputFormatter">
            <summary>
            Formatter interface for console output.
            </summary>
        </member>
        <member name="P:GameBox.Console.Formatter.IOutputFormatter.Enable">
            <summary>
            Gets or sets a value indicating whether set the formatter enable.
            </summary>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatter.Format(System.String)">
            <summary>
            Formats a message according to the given styles.
            </summary>
            <param name="message">The message to style.</param>
            <returns>The styled message.</returns>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatter.SetStyle(System.String,GameBox.Console.Formatter.IOutputFormatterStyle)">
            <summary>
            Sets a new output style.
            </summary>
            <param name="name">The style name.</param>
            <param name="style">The style instance.</param>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatter.HasStyle(System.String)">
            <summary>
            Checks if output formatter has style with specified name.
            </summary>
            <param name="name">The style name.</param>
            <returns>true if has specific name style, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatter.GetStyle(System.String)">
            <summary>
            Gets style options from style with specified name.
            </summary>
            <param name="name">The style name.</param>
            <exception cref="T:GameBox.Console.Exception.InvalidArgumentException">When style isn't defined.</exception>
        </member>
        <member name="T:GameBox.Console.Formatter.IOutputFormatterStyle">
            <summary>
            Formatter style interface for defining styles.
            </summary>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatterStyle.SetForeground(System.String)">
            <summary>
            Sets style foreground color name.
            </summary>
            <param name="color">The foreground color name.</param>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatterStyle.SetBackground(System.String)">
            <summary>
            Sets style background color name.
            </summary>
            <param name="color">The background color name.</param>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatterStyle.SetOption(System.String)">
            <summary>
            Apply some specific style option.
            </summary>
            <param name="effect">The specific style option effect.</param>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatterStyle.UnsetOption(System.String)">
            <summary>
            Cancel some specific style option.
            </summary>
            <param name="effect">The specific style option effect.</param>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatterStyle.Format(System.String)">
            <summary>
            Format the style to a given text.
            </summary>
            <param name="text">The given text.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="T:GameBox.Console.Formatter.IOutputFormatterWrappable">
            <summary>
            Formatter interface for console output that supports word wrapping.
            </summary>
        </member>
        <member name="M:GameBox.Console.Formatter.IOutputFormatterWrappable.FormatAndWrap(System.String,System.Int32)">
            <summary>
            Formats a message according to the given styles, wrapping at <paramref name="width"/>.
            </summary>
            <param name="message">The message to style.</param>
            <param name="width">Word wrapping at <paramref name="width"/>, 0 means no wrapping.</param>
            <returns>The styled message.</returns>
        </member>
        <member name="T:GameBox.Console.Formatter.OutputFormatter">
            <summary>
            Formatter class for console output.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatter.TagRegex">
            <summary>
            Indicates a legal formatted tag.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatter.styles">
            <summary>
            The styles mapping.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatter.styleStack">
            <summary>
            Represents the style stack currently in effect.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatter.defaultStytle">
            <summary>
            The default style.
            </summary>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.#ctor(System.Boolean,System.Collections.Generic.IDictionary{System.String,GameBox.Console.Formatter.IOutputFormatterStyle})">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Formatter.OutputFormatter"/> class.
            </summary>
            <param name="enable">Whether this formatter should actually decorate strings.</param>
            <param name="styles">The style mapping.</param>
        </member>
        <member name="P:GameBox.Console.Formatter.OutputFormatter.Enable">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.Escape(System.String)">
            <summary>
            Escapes special char in given text.
            </summary>
            <param name="message">Message to escape.</param>
            <returns>Escaped message.</returns>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.EscapeTrailingBackslash(System.String)">
            <summary>
            Escapes trailing "\" in given text when the end is "\".
            </summary>
            <param name="message">Message to escape.</param>
            <returns>Escaped message.</returns>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.Format(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.FormatAndWrap(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.GetStyle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.HasStyle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.SetStyle(System.String,GameBox.Console.Formatter.IOutputFormatterStyle)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.Clone">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.CreateStyleFromText(System.String)">
            <summary>
            Tries to create new style instance from text.
            </summary>
            <param name="text">The tag text.</param>
            <returns>The style instance.</returns>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.GetDefaultStyle">
            <summary>
            Returns the default style.
            </summary>
            <returns>The default style.</returns>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.GetStyleFromText(System.String)">
            <summary>
            Tries to create new style instance from text.
            </summary>
            <param name="text">The tag text.</param>
            <returns>The style instance.</returns>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatter.ApplyCurrentStyle(System.String,System.String,System.Int32,System.Int32@)">
            <summary>
            Applies current style from stack to text, if must be applied.
            </summary>
            <param name="text">The style text.</param>
            <param name="current">The current recorded styled text.</param>
            <param name="width">The wrap width.</param>
            <param name="currentLineLength">Current line length.</param>
            <returns>The styled text.</returns>
        </member>
        <member name="T:GameBox.Console.Formatter.OutputFormatterNone">
            <summary>
            <see cref="T:GameBox.Console.Formatter.OutputFormatterNone"/> does not have any features.
            maybe in test class is very useful.
            </summary>
        </member>
        <member name="P:GameBox.Console.Formatter.OutputFormatterNone.Enable">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterNone.Format(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterNone.GetStyle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterNone.HasStyle(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterNone.SetStyle(System.String,GameBox.Console.Formatter.IOutputFormatterStyle)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterNone.Clone">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Formatter.OutputFormatterStyle">
            <summary>
            Formatter style class for defining styles.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/ANSI_escape_code.</remarks>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.hrefSupported">
            <summary>
            Whether is supported href.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.availableForegroundColors">
            <summary>
            Allowable foreground.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.availableBackgroundColors">
            <summary>
            Allowable background.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.availableOptions">
            <summary>
            Allowable options.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.foreground">
            <summary>
            The foreground color.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.background">
            <summary>
            The background color.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.options">
            <summary>
            The set options.
            </summary>
        </member>
        <member name="F:GameBox.Console.Formatter.OutputFormatterStyle.href">
            <summary>
            The href.
            </summary>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Formatter.OutputFormatterStyle"/> class.
            </summary>
            <param name="foreground">The foreground color.</param>
            <param name="background">The background color.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.SetForeground(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.SetBackground(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.SetOption(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.UnsetOption(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.SetHref(System.String)">
            <summary>
            Sets the href.
            </summary>
            <param name="href">The href.</param>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.Format(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyle.FindSettedOptionsIndex(System.ValueTuple{System.String,System.String})">
            <summary>
            Find the options index.
            </summary>
            <param name="tuple">The tuple struct.</param>
            <returns>The index of setted option.</returns>
        </member>
        <member name="T:GameBox.Console.Formatter.OutputFormatterStyleNone">
            <summary>
            <see cref="T:GameBox.Console.Formatter.OutputFormatterStyleNone"/> does not have any features.
            maybe in test class is very useful.
            </summary>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyleNone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Formatter.OutputFormatterStyleNone"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyleNone.SetForeground(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyleNone.SetBackground(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyleNone.SetOption(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyleNone.UnsetOption(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Formatter.OutputFormatterStyleNone.Format(System.String)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Helper.AbstractHelper">
            <summary>
            <see cref="T:GameBox.Console.Helper.AbstractHelper"/> is the base class for all helper classes.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.AbstractHelper.TimeFormats">
            <summary>
            The time formats.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.AbstractHelper.Name">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Helper.AbstractHelper.StrlenWithoutDecoration(GameBox.Console.Formatter.IOutputFormatter,System.String)">
            <summary>
            Calculates the specified string length, excluding the length occupied by rich text.
            </summary>
            <param name="formatter">The decoration formatter.</param>
            <param name="str">The specified string.</param>
            <returns>The length without decoration.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.AbstractHelper.RemoveDecoration(GameBox.Console.Formatter.IOutputFormatter,System.String)">
            <summary>
            Removed the string decoration.
            </summary>
            <param name="formatter">The decoration formatter.</param>
            <param name="str">The specified string.</param>
            <returns>The decorated string was removed.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.AbstractHelper.FormatMemory(System.Int64)">
            <summary>
            Format the memory. Automatically select the most appropriate display size.
            </summary>
            <param name="memory">The memory size.</param>
            <returns>The formatted memory.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.AbstractHelper.FormatTime(System.Int64)">
            <summary>
            Format the time.
            </summary>
            <param name="ticks">The elapsed ticks.</param>
            <returns>The formatted time.</returns>
        </member>
        <member name="T:GameBox.Console.Helper.AbstractHelper.TimeFormat">
            <summary>
            The time format struct.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.AbstractHelper.TimeFormat.#ctor(System.Int64,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Helper.AbstractHelper.TimeFormat"/> struct.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.AbstractHelper.TimeFormat.Threshold">
            <summary>
            Gets format validation threshold.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.AbstractHelper.TimeFormat.Format">
            <summary>
            Gets format string.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.AbstractHelper.TimeFormat.Unit">
            <summary>
            Gets the time unit.
            </summary>
        </member>
        <member name="T:GameBox.Console.Helper.HelperDescriptor">
            <summary>
            This class adds helper method to describe objects in various formats.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.HelperDescriptor.descriptors">
            <summary>
            The descriptors mapping.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.HelperDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Helper.HelperDescriptor"/> class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.HelperDescriptor.Name">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Helper.HelperDescriptor.OptionFormat(System.String)">
            <summary>
            Sets the format option.
            </summary>
            <param name="format">The format type.</param>
            <returns>The described option.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperDescriptor.OptionRawText(System.Boolean)">
            <summary>
            Sets the raw text option.
            </summary>
            <param name="isRaw">Whether the raw text.</param>
            <returns>The described option.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperDescriptor.OptionRawOutput(System.Boolean)">
            <summary>
            Sets the raw output option.
            </summary>
            <param name="isRaw">Whether the raw output.</param>
            <returns>The described option.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperDescriptor.Namespace(System.String)">
            <summary>
            Sets the namespace option.
            </summary>
            <param name="namespace">The namespace option.</param>
            <returns>The described option.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperDescriptor.Describe(GameBox.Console.Output.IOutput,System.Object,GameBox.Console.Util.Mixture[])">
            <summary>
            Describes an object if supported.
            </summary>
            <param name="output">The std output instance.</param>
            <param name="content">The described object.</param>
            <param name="options">The described option.</param>
        </member>
        <member name="M:GameBox.Console.Helper.HelperDescriptor.Register(System.String,GameBox.Console.Descriptor.IDescriptor)">
            <summary>
            Registers a descriptor. this method can override existing decorators.
            </summary>
            <param name="format">The format type.</param>
            <param name="descriptor">The descriptor instance.</param>
            <returns>The <see cref="T:GameBox.Console.Helper.HelperDescriptor"/> instance.</returns>
        </member>
        <member name="T:GameBox.Console.Helper.HelperFormatter">
            <summary>
            The Formatter class provides helpers to format messages.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.HelperFormatter.lines">
            <summary>
            The message cache list.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.HelperFormatter.Name">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Helper.HelperFormatter.FormatSection(System.String,System.String,System.String)">
            <summary>
            Formats a message within a section.
            </summary>
            <param name="section">The section name.</param>
            <param name="message">The message.</param>
            <param name="style">The style to apply to the section.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperFormatter.FormatText(System.String,System.String)">
            <summary>
            Formats a message within a text.
            </summary>
            <param name="message">The message.</param>
            <param name="style">The style to apply to the section.</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperFormatter.FormatBlock(System.String,System.String,System.Boolean)">
            <inheritdoc cref="M:GameBox.Console.Helper.HelperFormatter.FormatBlock(System.String[],System.String,System.Boolean)"/>
            <param name="message">The message to write in the block.</param>
        </member>
        <member name="M:GameBox.Console.Helper.HelperFormatter.FormatBlock(System.String[],System.String,System.Boolean)">
            <summary>
            Formats a message as a block of text.
            </summary>
            <param name="messages">An message array write in the block.</param>
            <param name="style">The style to apply to the whole block.</param>
            <param name="large">Whether to return a large block.(Add blank lines before and after the block).</param>
            <returns>The formatted string.</returns>
        </member>
        <member name="T:GameBox.Console.Helper.HelperQuestion">
            <summary>
            The <see cref="T:GameBox.Console.Helper.HelperQuestion"/> class provides helpers to interact with the user.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.HelperQuestion.stty">
            <summary>
            Whether enable stty command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.HelperQuestion.shell">
            <summary>
            A valid unix shell.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.HelperQuestion.inputStream">
            <summary>
            The input stream.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.HelperQuestion.Name">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Helper.HelperQuestion.Encoding">
            <summary>
            Gets or sets the text encoding.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.SetSttyEnable(System.Boolean)">
            <summary>
            Sets whether usage of stty.
            </summary>
            <param name="enable">Whether the stty enabled.</param>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.Ask(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput,GameBox.Console.Question.Question)">
            <summary>
            Asks a question to the user.
            </summary>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
            <param name="question">The question.</param>
            <returns>The user answer.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.WriteError(GameBox.Console.Output.IOutput,System.Exception)">
            <summary>
            Outputs an error message.
            </summary>
            <param name="output">The std output instance.</param>
            <param name="exception">The exception instance.</param>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.WritePrompt(GameBox.Console.Output.IOutput,GameBox.Console.Question.Question)">
            <summary>
            Outputs the question prompt.
            </summary>
            <param name="output">The std output instance.</param>
            <param name="question">The question.</param>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.GetPasswordInput(GameBox.Console.Output.IOutput,System.IO.Stream)">
            <summary>
            Gets a password input from user.
            </summary>
            <param name="output">The std output instance.</param>
            <param name="inputStream">The input stream.</param>
            <returns>The user input value.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.HasSttyAvailable">
            <summary>
            Returns whether Stty command is available or not.
            </summary>
            <returns>Whether stty command is available.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.GetShell">
            <summary>
            Returns a valid unix shell.
            </summary>
            <returns>The valid shell name, null in case no valid shell is found.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.DoAsk(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput,GameBox.Console.Question.Question)">
            <summary>
            Asks the question to the user.
            </summary>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
            <param name="question">The question.</param>
            <returns>The user answer.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.DoAskNoInteractive(GameBox.Console.Output.IOutput,GameBox.Console.Question.Question)">
            <summary>
            Get results when no interaction occurs.
            </summary>
            <param name="output">The std output instance.</param>
            <param name="question">The question.</param>
            <returns>The default value.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.AutoComplete(GameBox.Console.Output.IOutput,GameBox.Console.Question.Question,System.IO.Stream,GameBox.Console.Util.Mixture)">
            <summary>
            Autocompletes a question.
            </summary>
            <remarks>Auto-completion can help users get problem completion through tabs.</remarks>
            <param name="output">The std output instance.</param>
            <param name="question">The question.</param>
            <param name="inputStream">The std input stream.</param>
            <param name="autocomplete">The autocompletes value.</param>
            <returns>Returns the autocompletes value.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.ReadInput(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Read the user input from <paramref name="inputStream"/>.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestion.ValidateAttempts(System.Func{GameBox.Console.Util.Mixture},GameBox.Console.Output.IOutput,GameBox.Console.Question.Question)">
            <summary>
            Validates an attempt.
            </summary>
            <param name="interviewer"> A callable that will ask for a question and return the result.</param>
            <param name="output">The std output instance.</param>
            <param name="question">The question instance.</param>
            <returns>The user input value.</returns>
        </member>
        <member name="T:GameBox.Console.Helper.HelperQuestionDefault">
            <summary>
            Default Style Guide compliant question helper.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestionDefault.WritePrompt(GameBox.Console.Output.IOutput,GameBox.Console.Question.Question)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Helper.HelperQuestionDefault.MapToChoiceValue(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.String)">
            <summary>
            Map the choices key to a value if it exists.
            </summary>
            <param name="choices">An array of choices.</param>
            <param name="defaultValue">The default key or value.</param>
            <returns>The choice value.</returns>
        </member>
        <member name="T:GameBox.Console.Helper.IHelper">
            <summary>
            <see cref="T:GameBox.Console.Helper.IHelper"/> is the interface all helpers must implement.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.IHelper.Name">
            <summary>
            Gets a value indicate the canonical name of this helper.
            </summary>
        </member>
        <member name="T:GameBox.Console.Helper.ProgressBar">
            <summary>
            The <see cref="T:GameBox.Console.Helper.ProgressBar"/> helpers to display progress output.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatNormal">
            <summary>
            The format normal.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatVerbose">
            <summary>
            The format verbose.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatVeryVerbose">
            <summary>
            The format very verbose.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatDebug">
            <summary>
            The format debug.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatNormalNomax">
            <summary>
            The format normal noxmax variants.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatVerboseNomax">
            <summary>
            The format verbose noxmax variants.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatVeryVerboseNomax">
            <summary>
            The format very verbose noxmax variants.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatDebugNomax">
            <summary>
            The format debug noxmax variants.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.FormatNomaxVariants">
            <summary>
            The format noxmax variants.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.overwrite">
            <summary>
            Whether override the output on the console.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.output">
            <summary>
            An <see cref="T:GameBox.Console.Output.IOutput"/> instance.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.messages">
            <summary>
            The message mapping.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.format">
            <summary>
            The format string.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.internalFormat">
            <summary>
            The key for the format definition.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.formats">
            <summary>
            The format definition mapping.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.formatters">
            <summary>
            The placeholder formatter.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.redrawFreq">
            <summary>
            The redraw frequency.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.firstRun">
            <summary>
            Whether the first run.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.formatLineCount">
            <summary>
            Format string number of lines.
            </summary>
        </member>
        <member name="F:GameBox.Console.Helper.ProgressBar.barChar">
            <summary>
            Returns the progress char.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.#ctor(GameBox.Console.Output.IOutput,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Helper.ProgressBar"/> class.
            </summary>
            <param name="output">An <see cref="T:GameBox.Console.Output.IOutput"/> instance.</param>
            <param name="maxSteps">Maximum steps (0 if unknown).</param>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.Step">
            <summary>
            Gets the current process step.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.StepWidth">
            <summary>
            Gets the step width.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.MaxSteps">
            <summary>
            Gets the maxinum step.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.ProgressPercent">
            <summary>
            Gets the process step percent.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.BarWidth">
            <summary>
            Gets the bar width.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.EmptyBarChar">
            <summary>
            Gets the empty bar char.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.ProgressChar">
            <summary>
            Gets the progress char.
            </summary>
        </member>
        <member name="P:GameBox.Console.Helper.ProgressBar.BarChar">
            <inheritdoc cref="F:GameBox.Console.Helper.ProgressBar.barChar"/>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetMaxSteps(System.Int32)">
            <summary>
            Sets the max steps.
            </summary>
            <param name="maxSteps">Maximum steps (0 if unknown).</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetRedrawFrequency(System.Int32)">
            <summary>
            Sets the redraw frequency.
            </summary>
            <param name="freq">The frequency.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetFormat(System.String)">
            <summary>
            Sets the specified format.
            </summary>
            <param name="format">The key for the format definition.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetBarWidth(System.Int32)">
            <summary>
            Sets the progress bar width.
            </summary>
            <param name="width">The progress bar width.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetBarChar(System.String)">
            <summary>
            Sets the bar char.
            </summary>
            <param name="character">The bar char.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetEmptyBarChar(System.String)">
            <summary>
            Sets the empty bar char.
            </summary>
            <param name="character">The empty bar char.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetProgressChar(System.String)">
            <summary>
            Sets the progress char.
            </summary>
            <param name="character">The progress char.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.Begin">
            <summary>
            Begin the progress output.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.Begin(System.Int32)">
            <summary>
            Begin the progress output.
            </summary>
            <param name="maxStep">The maxinum steps.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.Advance(System.Int32)">
            <summary>
            Advances the progress output <see cref="P:GameBox.Console.Helper.ProgressBar.Step" /> steps.
            </summary>
            <param name="step">The steps.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.End">
            <summary>
            Ended the progress output.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetProgress(System.Int32)">
            <summary>
            Sets the progress.
            </summary>
            <param name="step">The current step.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.Display">
            <summary>
            Outputs the current progress string.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.Clear">
            <summary>
            Removes the progress bar from the current line.
            </summary>
            <remarks>
            This is useful if you wish to write some output
            while a progress bar is running.
            Call Display() to show the progress bar again.
            </remarks>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetFormatDefinition(System.String,System.String)">
            <summary>
            Sets a format for a given name.
            This method also allow you to override an existing format.
            </summary>
            <param name="name">The format name.</param>
            <param name="format">The format string.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetPlaceholderFormatterDefinition(System.String,System.Func{GameBox.Console.Helper.ProgressBar,GameBox.Console.Output.IOutput,System.String})">
            <summary>
            Sets the placeholder formatter for a given name.
            This method also allow you to override an existing formatter.
            </summary>
            <param name="name">The placeholder name.</param>
            <param name="closure">The closure.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.GetPlaceholderFormatterDefinition(System.String)">
            <summary>
            Gets the placeholder formatter for a given name.
            </summary>
            <param name="name">The placeholder name.</param>
            <returns>The closure.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetMessage(System.String,System.String)">
            <summary>
            Set the specified placeholder text.
            </summary>
            <param name="text">The text.</param>
            <param name="placeholder">The placeholder.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.GetMessage(System.String)">
            <summary>
            Gets the specified placeholder text.
            </summary>
            <param name="placeholder">The placeholder.</param>
            <returns>The text.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.Overwrite(System.String)">
            <summary>
            Overwrites a previous message to the output.
            </summary>
            <param name="message">The new message.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.GetBestFormat">
            <summary>
            Gets the best format name.
            </summary>
            <returns>The best format name.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.SetRealFormat(System.String)">
            <summary>
            Sets the real format string with format definition key.
            </summary>
            <param name="format">The format definition key.</param>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.GetFormatDefinition(System.String)">
            <summary>
            Gets the format definition.
            </summary>
            <param name="name">The format definition name.</param>
            <returns>The format definition string.</returns>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.InitFormats">
            <summary>
            Inits the format definition.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.InitPlaceholderFormatters">
            <summary>
            Inits the placeholder formatters.
            </summary>
        </member>
        <member name="M:GameBox.Console.Helper.ProgressBar.BuildLine">
            <summary>
            Build the progress bar info.
            </summary>
            <returns>The progress bar info.</returns>
        </member>
        <member name="T:GameBox.Console.Input.AbstractInput">
            <summary>
            <see cref="T:GameBox.Console.Input.AbstractInput"/> is the default base class for all concrete Input classes.
            </summary>
            <remarks><seealso cref="T:GameBox.Console.Input.InputArgs"/>The input comes from the CLI arguments (argv).</remarks>
        </member>
        <member name="F:GameBox.Console.Input.AbstractInput.arguments">
            <summary>
            Command line given arguments.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.AbstractInput.options">
            <summary>
            Command line given options.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.AbstractInput.inputStream">
            <summary>
            The input stream to read from when interacting with the user.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Input.AbstractInput"/> class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.AbstractInput.IsInteractive">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Input.AbstractInput.Encoding">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Input.AbstractInput.Definition">
            <summary>
            Gets current input definition.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.EscapesToken(System.String)">
            <summary>
            Escapes a token through escapeshellarg if it contains unsafe chars.
            </summary>
            <param name="token">The specified token.</param>
            <returns>safe token.</returns>
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.Bind(GameBox.Console.Input.InputDefinition)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.Validate">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.GetInputStream">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.GetFirstArgument">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.GetArgument(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.GetOption(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.GetRawOption(System.String,GameBox.Console.Util.Mixture,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.SetArgument(System.String,GameBox.Console.Util.Mixture)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.SetOption(System.String,GameBox.Console.Util.Mixture)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.SetInteractive(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.SetInputStream(System.IO.Stream)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.HasArgument(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.HasOption(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.HasRawOption(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.GetOptions">
            <inheritdoc cref="F:GameBox.Console.Input.AbstractInput.options"/>
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.GetArguments">
            <inheritdoc cref="F:GameBox.Console.Input.AbstractInput.arguments"/>
        </member>
        <member name="M:GameBox.Console.Input.AbstractInput.Parse">
            <summary>
            Processes command line arguments.
            </summary>
        </member>
        <member name="T:GameBox.Console.Input.IInput">
            <summary>
            <see cref="T:GameBox.Console.Input.IInput"/> is the interface implemented by all input classes.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.IInput.Encoding">
            <summary>
            Gets or sets the input encoding.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.IInput.IsInteractive">
            <summary>
            Gets a value indicating whether the input is interactive.
            </summary>
            <returns>true if the input means interactive, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.Bind(GameBox.Console.Input.InputDefinition)">
            <summary>
            Binds the current Input instance with the given arguments and options definition.
            </summary>
            <param name="definition"><see cref="T:GameBox.Console.Input.InputDefinition"/> represents a set of valid command line arguments and options.</param>
        </member>
        <member name="M:GameBox.Console.Input.IInput.Validate">
            <summary>
            Validates the input meets the definition(<see cref="T:GameBox.Console.Input.InputDefinition"/>).
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.IInput.HasRawOption(System.String,System.Boolean)">
            <summary>
            Returns true if the raw option (not parsed) contain a name.
            <para>You should not use this api in high-level code. because it has not been verified.</para>
            <para>This interface is only suitable for use before the framework performs validation operations.</para>
            </summary>
            <param name="name">The name to look for in the raw option.</param>
            <param name="ignoreAdditional">Only check real option(Do not check the option passed to the script), skip those following an end of options (--) signal.</param>
            <returns>true if the value is contained in the raw option.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.GetRawOption(System.String,GameBox.Console.Util.Mixture,System.Boolean)">
            <summary>
            Returns the value of a raw option (not parsed).
            <para>You should not use this api in high-level code. because it has not been verified.</para>
            <para>This interface is only suitable for use before the framework performs validation operations.</para>
            </summary>
            <param name="name">The name to look for in the raw option.</param>
            <param name="defaultValue">The default value to return if no result is found.</param>
            <param name="ignoreAdditional">Only check real option(Do not check the option passed to the script), skip those following an end of options (--) signal.</param>
            <returns>The argument or option value.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.GetFirstArgument">
            <summary>
            Returns the first command line argument.
            <para>You should not use this api in high-level code. because it has not been verified.</para>
            <para>This interface is only suitable for use before the framework performs validation operations.</para>
            </summary>
            <returns>The first argument.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.HasArgument(System.String)">
            <summary>
            Returns true if an <see cref="T:GameBox.Console.Input.InputArgument"/> object exists by name.
            </summary>
            <param name="name">The Input Argument name.</param>
            <returns>true if the <see cref="T:GameBox.Console.Input.InputArgument"/> object exists, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.GetArgument(System.String)">
            <summary>
            Returns the argument value for a given argument name.
            return null if the argument value not exists.
            </summary>
            <param name="name">The argument name.</param>
            <returns>The argument value.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.SetArgument(System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Sets an argument value by name.
            </summary>
            <param name="name">The argument name.</param>
            <param name="value">The argument value.</param>
        </member>
        <member name="M:GameBox.Console.Input.IInput.HasOption(System.String)">
            <summary>
            Returns true if an <see cref="T:GameBox.Console.Input.InputOption"/> object exists by name.
            </summary>
            <param name="name">The option name.</param>
            <returns>true if the <see cref="T:GameBox.Console.Input.InputOption"/> object exists, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.GetOption(System.String)">
            <summary>
            Returns the option value for a given option name.
            </summary>
            <param name="name">The option name.</param>
            <returns>The option value.</returns>
        </member>
        <member name="M:GameBox.Console.Input.IInput.SetOption(System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Sets an option value by name.
            </summary>
            <param name="name">The option name.</param>
            <param name="value">The option value.</param>
        </member>
        <member name="M:GameBox.Console.Input.IInput.SetInteractive(System.Boolean)">
            <summary>
            Sets the input interactivity.
            </summary>
            <param name="interactive">If the input should be interactive.</param>
        </member>
        <member name="T:GameBox.Console.Input.IInputDefinition">
            <summary>
            Base interface for <see cref="T:GameBox.Console.Input.InputOption"/>, <see cref="T:GameBox.Console.Input.InputArgument"/> and <see cref="T:GameBox.Console.Input.InputDefinition"/>.
            </summary>
        </member>
        <member name="T:GameBox.Console.Input.IInputStreamable">
            <summary>
            <see cref="T:GameBox.Console.Input.IInputStreamable"/> is the interface implemented by all input classes
            that have an input stream. This is mainly useful for testing purpose.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.IInputStreamable.SetInputStream(System.IO.Stream)">
            <summary>
            Sets the input stream to read from when interacting with the user.
            </summary>
            <param name="stream">The input stream.</param>
        </member>
        <member name="M:GameBox.Console.Input.IInputStreamable.GetInputStream">
            <summary>
            Gets the input stream.
            </summary>
            <returns>The input stream.</returns>
        </member>
        <member name="T:GameBox.Console.Input.InputArgs">
            <summary>
            The input comes from the CLI arguments (args).
            </summary>
            <remarks>
            By default, the `<see cref="M:System.Environment.GetCommandLineArgs"/>` array is used for the input values.
            This can be overridden by explicitly passing the input values in the constructor:
            <code>var inputArgs = new InputArgs(args);</code>
            </remarks>
        </member>
        <member name="F:GameBox.Console.Input.InputArgs.args">
            <summary>
            The raw args.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputArgs.parsed">
            <summary>
            The parsed args.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.#ctor(System.String[],GameBox.Console.Input.InputDefinition)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Input.InputArgs"/> class.
            </summary>
            <param name="args">An array of parameters from the CLI.</param>
            <param name="definition">A <see cref="T:GameBox.Console.Input.InputDefinition"/> instance.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.HasRawOption(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.GetRawOption(System.String,GameBox.Console.Util.Mixture,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.GetFirstArgument">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.ToString">
            <summary>
            Returns a stringified representation of the args passed to the command.
            </summary>
            <returns>The args passed to the command.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.SetArgs(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the raw args.
            </summary>
            <param name="args">The raw args.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.Parse">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.ParseArgument(System.String)">
            <summary>
            Parses an argument.
            </summary>
            <param name="token">The current token.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.ParseLongOption(System.String)">
            <summary>
            Parses a long option.
            </summary>
            <param name="token">The current token.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.AddLongOption(System.String,System.String)">
            <summary>
            Adds a long option value.
            </summary>
            <param name="name">The long option name.</param>
            <param name="value">The long option value.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.ParseShortOption(System.String)">
            <summary>
            Parses a short option.
            </summary>
            <param name="token">The current token.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.AddShortOption(System.Char,System.String)">
            <summary>
            Adds a short option value.
            </summary>
            <param name="shortcut">The short option key.</param>
            <param name="value">The short option value.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.AddShortOption(System.String,System.String)">
            <summary>
            Adds a short option value.
            </summary>
            <param name="shortcut">The short option key.</param>
            <param name="value">The short option value.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgs.ParseShortOptionSet(System.String)">
            <summary>
            Parses a short option set.
            </summary>
            <param name="name">The short option name.</param>
        </member>
        <member name="T:GameBox.Console.Input.InputArgument">
            <summary>
            Represents a command line argument.
            What is argument : console install GameBox.Core.
            Where GameBox.Core is argument.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputArgument.mode">
            <summary>
            The argument mode.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputArgument.default">
            <summary>
            The default value(<see cref="F:GameBox.Console.Input.InputArgumentModes.Optional"/> mode only).
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.InputArgument.#ctor(System.String,GameBox.Console.Input.InputArgumentModes,System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Input.InputArgument"/> class.
            </summary>
            <param name="name">The argument name.</param>
            <param name="mode">The argument mode.</param>
            <param name="description">A description text.</param>
            <param name="defaultValue">The default value(<see cref="F:GameBox.Console.Input.InputArgumentModes.Optional"/> mode only).</param>
        </member>
        <member name="P:GameBox.Console.Input.InputArgument.Name">
            <summary>
            Gets the argument name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputArgument.Description">
            <summary>
            Gets a description text.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputArgument.IsRequired">
            <summary>
            Gets a value indicating whether the argument is required.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputArgument.IsArray">
            <summary>
            Gets a value indicating whether the argument is array.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.InputArgument.op_Implicit(GameBox.Console.Input.InputArgument)~System.String">
            <summary>
            Convert <see cref="T:GameBox.Console.Input.InputArgument"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgument.InvalidName(System.String)">
            <summary>
            Check the argument's name and shortcut is invalid.
            </summary>
            <param name="name">The name of option.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputArgument.GetDefault">
            <summary>
            Gets the argument default value.
            </summary>
            <returns>null if the argument default value not exists.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputArgument.ToString">
            <summary>
            Get the argument name.
            </summary>
            <returns>The argument name.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputArgument.SetDefault(GameBox.Console.Util.Mixture)">
            <summary>
            Sets the default value.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="T:GameBox.Console.Input.InputArgumentModes">
            <summary>
            Definition InputArgument necessity and mode.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputArgumentModes.Required">
            <summary>
            The arugment is required
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputArgumentModes.Optional">
            <summary>
            The argument is optional
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputArgumentModes.IsArray">
            <summary>
            The argument is array
            </summary>
        </member>
        <member name="T:GameBox.Console.Input.InputDefinition">
            <summary>
            A <see cref="T:GameBox.Console.Input.InputDefinition"/> represents a set of valid command line arguments and options.
            </summary>
            <remarks>
            Usage:
            <code>
            var definition = new InputDefinition(
                new InputArgument("namespace", InputArgumentModes.Optional, "The namespace name."),
                new InputOption("raw", null, InputOptionModes.ValueOptional, "To output raw command list.")
            );
            </code>
            </remarks>
        </member>
        <member name="F:GameBox.Console.Input.InputDefinition.shortcuts">
            <summary>
            The options shortcuts mapping. key is shortcut ,value is option name.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputDefinition.arguments">
            <summary>
            The array of InputArgument objects.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputDefinition.options">
            <summary>
            The array of InputOption objects.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputDefinition.requiredCount">
            <summary>
            How many modes of the <see cref="T:GameBox.Console.Input.InputArgument"/> are required(<see cref="F:GameBox.Console.Input.InputArgumentModes.Required"/>).
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputDefinition.hasOptional">
            <summary>
            The <see cref="T:GameBox.Console.Input.InputArgument"/> has optional.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputDefinition.hasAnArrayArgument">
            <summary>
            One of the <see cref="T:GameBox.Console.Input.InputArgument"/> has array.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.#ctor(GameBox.Console.Input.IInputDefinition[])">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Input.InputDefinition"/> class.
            </summary>
            <param name="definition">An array of <see cref="T:GameBox.Console.Input.InputArgument"/> and <see cref="T:GameBox.Console.Input.InputOption"/> instance.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.SetDefinition(GameBox.Console.Input.IInputDefinition[])">
            <summary>
            Sets the command line definition of the input.
            </summary>
            <param name="definition">command line definition.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.SetOptions(GameBox.Console.Input.InputOption[])">
            <summary>
            Sets an array of InputOption objects.
            </summary>
            <param name="options">An array of InputOption objects.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.AddOptions(GameBox.Console.Input.InputOption[])">
            <summary>
            Adds an array of <see cref="T:GameBox.Console.Input.InputOption"/> objects.
            </summary>
            <param name="options">An array of <see cref="T:GameBox.Console.Input.InputOption"/> objects.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetOptions">
            <summary>
            Gets the array of InputOption objects.
            </summary>
            <returns>An array of InputOption objects.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetOption(System.String)">
            <summary>
            Gets the <see cref="T:GameBox.Console.Input.InputOption"/> object by name.
            </summary>
            <param name="name">The option name.</param>
            <returns>The <see cref="T:GameBox.Console.Input.InputOption"/> object.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.HasOption(System.String)">
            <summary>
            Returns true if an <see cref="T:GameBox.Console.Input.InputOption"/> object exists by name.
            </summary>
            <param name="name">The option name.</param>
            <returns>true if the <see cref="T:GameBox.Console.Input.InputOption"/> object exists, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.SetArguments(GameBox.Console.Input.InputArgument[])">
            <summary>
            Sets an array of InputArgument objects.
            </summary>
            <param name="arguments">An array of InputArgument objects.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.AddArguments(GameBox.Console.Input.InputArgument[])">
            <summary>
            Adds an array of <see cref="T:GameBox.Console.Input.InputArgument"/> objects.
            </summary>
            <param name="arguments">An array of InputArgument objects.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetArguments">
            <summary>
            Gets the array of <see cref="T:GameBox.Console.Input.InputArgument"/> objects.
            </summary>
            <returns>An array of <see cref="T:GameBox.Console.Input.InputArgument"/> objects.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetArgument(System.String)">
            <summary>
            Gets the <see cref="T:GameBox.Console.Input.InputArgument"/> object by name.
            </summary>
            <param name="name">The argument name.</param>
            <returns>The <see cref="T:GameBox.Console.Input.InputArgument"/> object.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetArgument(System.Int32)">
            <summary>
            Gets the <see cref="T:GameBox.Console.Input.InputArgument"/> object by index.
            </summary>
            <param name="index">The index of arguments.</param>
            <returns>The <see cref="T:GameBox.Console.Input.InputArgument"/> object.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetArgumentRequiredCount">
            <summary>
            Returns the number of required <see cref="T:GameBox.Console.Input.InputArgument"/>s.
            </summary>
            <returns> The number of required <see cref="T:GameBox.Console.Input.InputArgument"/>s.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.HasArgument(System.String)">
            <summary>
            Returns true if an <see cref="T:GameBox.Console.Input.InputArgument"/> object exists by name.
            </summary>
            <param name="name">The argument name.</param>
            <returns>true if the <see cref="T:GameBox.Console.Input.InputArgument"/> object exists, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.HasArgument(System.Int32)">
            <summary>
            Returns true if an <see cref="T:GameBox.Console.Input.InputArgument"/> object exists by index.
            </summary>
            <param name="index">The argument index.</param>
            <returns>true if the <see cref="T:GameBox.Console.Input.InputArgument"/> object exists, false otherwise.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetArgumentDefaults">
            <summary>
            Gets the array of the <see cref="T:GameBox.Console.Input.InputArgument"/> object default value.
            </summary>
            <returns>The array if <see cref="T:GameBox.Console.Input.InputArgument"/> default value.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetOptionsDefaults">
            <summary>
            Gets the array of the <see cref="T:GameBox.Console.Input.InputOption"/> object default value.
            </summary>
            <returns>The array if <see cref="T:GameBox.Console.Input.InputOption"/> default value.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.HasShortcut(System.String)">
            <summary>
            Returns true if an <see cref="T:GameBox.Console.Input.InputOption"/> object exists by shortcut.
            </summary>
            <param name="name">The <see cref="T:GameBox.Console.Input.InputOption"/> shortcut.</param>
            <returns>true if has shortcut.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.HasShortcut(System.Char)">
            <summary>
            Returns true if an <see cref="T:GameBox.Console.Input.InputOption"/> object exists by shortcut.
            </summary>
            <param name="name">The <see cref="T:GameBox.Console.Input.InputOption"/> shortcut.</param>
            <returns>true if has shortcut.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetOptionForShortcut(System.String)">
            <summary>
            Gets an <see cref="T:GameBox.Console.Input.InputOption"/> by shortcut.
            </summary>
            <param name="name">The <see cref="T:GameBox.Console.Input.InputOption"/> shortcut.</param>
            <returns>An <see cref="T:GameBox.Console.Input.InputOption"/> object.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetOptionForShortcut(System.Char)">
            <summary>
            Gets an <see cref="T:GameBox.Console.Input.InputOption"/> by shortcut.
            </summary>
            <param name="name">The <see cref="T:GameBox.Console.Input.InputOption"/> shortcut.</param>
            <returns>An <see cref="T:GameBox.Console.Input.InputOption"/> object.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.GetSynopsis(System.Boolean)">
            <summary>
            Returns the synopsis for the command line arguments and options definition.
            </summary>
            <param name="isShort">Whether to show the short version of the synopsis (without options) or not.</param>
            <returns>The synopsis for the command.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.AddOption(GameBox.Console.Input.InputOption)">
            <summary>
            Adds an <see cref="T:GameBox.Console.Input.InputOption"/> object.
            </summary>
            <param name="option">The <see cref="T:GameBox.Console.Input.InputOption"/> object.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.AddArgument(GameBox.Console.Input.InputArgument)">
            <summary>
            Adds a <see cref="T:GameBox.Console.Input.InputArgument"/> object.
            </summary>
            <param name="argument">The <see cref="T:GameBox.Console.Input.InputArgument"/> object.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputDefinition.ShortcutToOptionName(System.String)">
            <summary>
            Returns the <see cref="T:GameBox.Console.Input.InputOption"/> name given a shortcut.
            </summary>
            <param name="shortcut">The shortcut.</param>
            <returns>The <see cref="T:GameBox.Console.Input.InputOption"/> name.</returns>
        </member>
        <member name="T:GameBox.Console.Input.InputOption">
            <summary>
            Represents a command line option.
            What is option : console init -v.
            Where -v is option.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOption.shortcut">
            <summary>
            The shortcut for current option.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOption.shortcutString">
            <summary>
            The shortcut for current option.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOption.mode">
            <summary>
            The option mode.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOption.default">
            <summary>
            The default value.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.#ctor(System.String,System.String,GameBox.Console.Input.InputOptionModes,System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Input.InputOption"/> class.
            </summary>
            <param name="name">The option name.</param>
            <param name="shortcut">The shortcuts, can be null, a string of shortcuts delimited by | or an array of shortcuts.</param>
            <param name="mode">The option mode.</param>
            <param name="description">A description text.</param>
            <param name="defaultValue">The default value(must be null for <see cref="F:GameBox.Console.Input.InputOptionModes.ValueNone"/>).</param>
        </member>
        <member name="P:GameBox.Console.Input.InputOption.Name">
            <summary>
            Gets the option name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputOption.Description">
            <summary>
            Gets the option description.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputOption.IsValueOptional">
            <summary>
            Gets a value indicating whether the option is optional value.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputOption.IsValueAccept">
            <summary>
            Gets a value indicating whether the option is accept value.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputOption.IsValueRequired">
            <summary>
            Gets a value indicating whether the option value is required.
            </summary>
        </member>
        <member name="P:GameBox.Console.Input.InputOption.IsArray">
            <summary>
            Gets a value indicating whether the option is array.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.InvalidName(System.String,System.String)">
            <summary>
            Check the option's name and shortcut is invalid.
            </summary>
            <param name="name">The name of option.</param>
            <param name="shortcut">The shortcut of option.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.SetDefault(GameBox.Console.Util.Mixture)">
            <summary>
            Sets the default value.
            </summary>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.GetShortcut">
            <summary>
            Get the option shortcut array.
            </summary>
            <returns>The option shortcut array.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.GetShortcutString">
            <summary>
            Get the option shortcut string.
            </summary>
            <returns>The shortcut string.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.GetDefault">
            <summary>
            Gets the option default value.
            </summary>
            <returns>null if the option default value not exists.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.Equals(System.Object)">
            <summary>
            Checks whether the given option equals this one.
            </summary>
            <param name="obj">Value to compare.</param>
            <returns>Is equals.</returns>
        </member>
        <member name="M:GameBox.Console.Input.InputOption.GetHashCode">
            <summary>
            Get option hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="T:GameBox.Console.Input.InputOptionModes">
            <summary>
            Definition <see cref="T:GameBox.Console.Input.InputOption"/> necessity and mode.
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOptionModes.ValueNone">
            <summary>
            The option not accept value
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOptionModes.ValueRequired">
            <summary>
            Required value if set the option
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOptionModes.ValueOptional">
            <summary>
            Optional value if set the option
            </summary>
        </member>
        <member name="F:GameBox.Console.Input.InputOptionModes.IsArray">
            <summary>
            The option is array
            </summary>
        </member>
        <member name="T:GameBox.Console.Input.InputString">
            <summary>
            Represents an input provided as a string.
            </summary>
        </member>
        <member name="M:GameBox.Console.Input.InputString.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Input.InputString"/> class.
            </summary>
            <param name="input">A string representing the parameters from the CLI.</param>
        </member>
        <member name="M:GameBox.Console.Input.InputString.Tokenize(System.String)">
            <summary>
            Tokenizes a string.
            </summary>
        </member>
        <member name="T:GameBox.Console.Output.AbstractOutput">
            <summary>
            Base class for output classes.
            </summary>
            <remarks>
            There are five levels of verbosity:
            - normal: no option passed (normal output).
            - verbose: -v (more output).
            - very verbose: -vv (highly extended output).
            - debug: -vvv (all debug output).
            - quiet: -q (no output).
            </remarks>
        </member>
        <member name="F:GameBox.Console.Output.AbstractOutput.Verbosities">
            <summary>
            Verbosities available enumeration.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.AbstractOutput.newLine">
            <summary>
            The new line char.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.#ctor(GameBox.Console.Output.OutputOptions,GameBox.Console.Formatter.IOutputFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Output.AbstractOutput"/> class.
            </summary>
            <param name="options">The output option.</param>
            <param name="formatter">Output formatter instance (null to use default <see cref="T:GameBox.Console.Formatter.OutputFormatter"/>).</param>
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.Encoding">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.Options">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.Formatter">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.IsDecorated">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.IsNormal">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.IsQuiet">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.IsVerbose">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.IsVeryVerbose">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.IsDebug">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Output.AbstractOutput.Verbosity">
            <summary>
            Gets the verbosity level.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.SetDecorated(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.SetFormatter(GameBox.Console.Formatter.IOutputFormatter)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.SetOptions(GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.SetVerbosity(GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.WriteLine(System.String,GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.Write(System.String,System.Boolean,GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.GetNewLine">
            <inheritdoc cref="F:GameBox.Console.Output.AbstractOutput.newLine"/>
        </member>
        <member name="M:GameBox.Console.Output.AbstractOutput.Write(System.String,System.Boolean)">
            <summary>
            Writes a message to the output.
            </summary>
            <param name="message">A message to write to the output.</param>
            <param name="newLine">Whether to add a newline.</param>
        </member>
        <member name="T:GameBox.Console.Output.ExtendOutput">
            <summary>
            <see cref="T:GameBox.Console.Output.IOutput"/> extension function.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.ExtendOutput.WriteLine(GameBox.Console.Output.IOutput,System.Collections.Generic.IEnumerable{System.String},GameBox.Console.Output.OutputOptions)">
            <summary>
            Writes an message array to the output and adds a newline at the end.
            </summary>
            <param name="output">The <see cref="T:GameBox.Console.Output.IOutput"/> instance.</param>
            <param name="messages">The message as an iterable of strings or a single string.</param>
            <param name="options">A bitmask of options. <see cref="F:GameBox.Console.Output.OutputOptions.None"/> is considered the same as <see cref="F:GameBox.Console.Output.OutputOptions.OutputNormal"/> | <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityNormal"/>.</param>
        </member>
        <member name="T:GameBox.Console.Output.IOutput">
            <summary>
            <see cref="T:GameBox.Console.Output.IOutput"/> is the interface implemented by all Standard Output classes.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.Options">
            <summary>
            Gets the output option.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.Formatter">
            <summary>
            Gets the formatter.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.Encoding">
            <summary>
            Gets or sets the encoding for output message.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.IsDecorated">
            <summary>
            Gets a value indicating whether is decorated.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.IsNormal">
            <summary>
            Gets a value indicating whether the verbosity is set to <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityNormal"/>.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.IsQuiet">
            <summary>
            Gets a value indicating whether the verbosity is set to <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityQuiet"/>.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.IsVerbose">
            <summary>
            Gets a value indicating whether the verbosity is set to <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityVerbose"/>.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.IsVeryVerbose">
            <summary>
            Gets a value indicating whether the verbosity is set to <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityVeryVerbose"/>.
            </summary>
        </member>
        <member name="P:GameBox.Console.Output.IOutput.IsDebug">
            <summary>
            Gets a value indicating whether the verbosity is set to <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityDebug"/>.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.IOutput.Write(System.String,System.Boolean,GameBox.Console.Output.OutputOptions)">
            <summary>
            Writes a message to the output.
            </summary>
            <param name="message">The message as an iterable of strings or a single string.</param>
            <param name="newLine">Whether to add a newline.</param>
            <param name="options">A bitmask of options. <see cref="F:GameBox.Console.Output.OutputOptions.None"/> is considered the same as <see cref="F:GameBox.Console.Output.OutputOptions.OutputNormal"/> | <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityNormal"/>.</param>
        </member>
        <member name="M:GameBox.Console.Output.IOutput.WriteLine(System.String,GameBox.Console.Output.OutputOptions)">
            <summary>
            Writes a message to the output and adds a newline at the end.
            </summary>
            <param name="message">The message as an iterable of strings or a single string.</param>
            <param name="options">A bitmask of options. <see cref="F:GameBox.Console.Output.OutputOptions.None"/> is considered the same as <see cref="F:GameBox.Console.Output.OutputOptions.OutputNormal"/> | <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityNormal"/>.</param>
        </member>
        <member name="M:GameBox.Console.Output.IOutput.SetOptions(GameBox.Console.Output.OutputOptions)">
            <summary>
            Sets the option of the output.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:GameBox.Console.Output.IOutput.SetVerbosity(GameBox.Console.Output.OutputOptions)">
            <summary>
            Sets the verbosity level.
            </summary>
            <param name="verbosity">The verbosity.</param>
        </member>
        <member name="M:GameBox.Console.Output.IOutput.SetDecorated(System.Boolean)">
            <summary>
            Sets the decorate enable flag.
            </summary>
            <param name="decorated">Whether to decorated the messages.</param>
        </member>
        <member name="M:GameBox.Console.Output.IOutput.SetFormatter(GameBox.Console.Formatter.IOutputFormatter)">
            <summary>
            Set the message formatter.
            </summary>
            <param name="formatter">The foramtter.</param>
        </member>
        <member name="T:GameBox.Console.Output.IOutputConsole">
            <summary>
            <see cref="T:GameBox.Console.Output.IOutputConsole"/> is the interface implemented by all console output class.
            This adds information about stderr output stream.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.IOutputConsole.GetErrorOutput">
            <summary>
            Gets the stderr output interface.
            </summary>
            <returns>The stderr output value.</returns>
        </member>
        <member name="M:GameBox.Console.Output.IOutputConsole.SetErrorOutput(GameBox.Console.Output.IOutput)">
            <summary>
            Sets the stderr output in current console output.
            </summary>
            <param name="stderr">The stderr output value.</param>
        </member>
        <member name="T:GameBox.Console.Output.OutputConsole">
            <summary>
            <see cref="T:GameBox.Console.Output.OutputConsole"/> is the default class for all CLI output. It uses STDOUT and STDERR.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputConsole.stderr">
            <summary>
            The standard error stream.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.OutputConsole.#ctor(GameBox.Console.Output.OutputOptions,GameBox.Console.Formatter.IOutputFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Output.OutputConsole"/> class.
            </summary>
            <param name="options">The output options.</param>
            <param name="formatter">Output formatter instance (null to use default <see cref="T:GameBox.Console.Formatter.OutputFormatter"/>).</param>
        </member>
        <member name="P:GameBox.Console.Output.OutputConsole.Encoding">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.OutputConsole.GetErrorOutput">
            <summary>
            Gets the stderr output interface.
            </summary>
            <returns>The stderr output value.</returns>
        </member>
        <member name="M:GameBox.Console.Output.OutputConsole.SetErrorOutput(GameBox.Console.Output.IOutput)">
            <summary>
            Sets the stderr output in current console output.
            </summary>
            <param name="stderr">The stderr output value.</param>
        </member>
        <member name="M:GameBox.Console.Output.OutputConsole.SetVerbosity(GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.OutputConsole.SetFormatter(GameBox.Console.Formatter.IOutputFormatter)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.OutputConsole.SetDecorated(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Output.OutputConsole.SetOptions(GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Output.OutputConsoleSection">
            <summary>
            <see cref="T:GameBox.Console.Output.OutputConsoleSection"/> can limit the output to the section, after which the contents of the section can be deleted.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.OutputConsoleSection.#ctor(System.IO.Stream,GameBox.Console.Output.OutputOptions,GameBox.Console.Formatter.IOutputFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Output.OutputConsoleSection"/> class.
            </summary>
            <param name="stdout">The given stream resources.</param>
            <param name="options">The output options.</param>
            <param name="formatter">Output formatter instance (null to use default <see cref="T:GameBox.Console.Formatter.OutputFormatter"/>).</param>
        </member>
        <member name="M:GameBox.Console.Output.OutputConsoleSection.Clear(System.Int32)">
            <summary>
            Clear the section.
            </summary>
            <param name="line">How much line will cleaned.</param>
        </member>
        <member name="M:GameBox.Console.Output.OutputConsoleSection.AddContent(System.String)">
            <summary>
            Add message in section.
            </summary>
            <param name="message">The content message.</param>
        </member>
        <member name="M:GameBox.Console.Output.OutputConsoleSection.Write(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Output.OutputNone">
            <summary>
            <see cref="T:GameBox.Console.Output.OutputNone"/> suppresses all output.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.OutputNone.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Output.OutputNone"/> class.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.OutputNone.Write(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Output.OutputOptions">
            <summary>
            The options of the output.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.None">
            <summary>
            Default of the options, is considered the same as <see cref="F:GameBox.Console.Output.OutputOptions.OutputNormal"/> | <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityNormal"/>.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.OutputNormal">
            <summary>
            Normal of the output.(use output formatter)
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.OutputRaw">
            <summary>
            Raw of the output.(do nothing)
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.OutputPlain">
            <summary>
            Plain of the output.(use output formatter and strip html label)
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.VerbosityQuiet">
            <summary>
            Quiet output the message.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.VerbosityNormal">
            <summary>
            Normal output the message.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.VerbosityVerbose">
            <summary>
            Detail output the message.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.VerbosityVeryVerbose">
            <summary>
            Very Detail output the message.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputOptions.VerbosityDebug">
            <summary>
            Debug output the message.
            </summary>
        </member>
        <member name="T:GameBox.Console.Output.OutputStream">
            <summary>
            <see cref="T:GameBox.Console.Output.OutputStream"/> writes the output to a given <see cref="P:GameBox.Console.Output.OutputStream.Stream"/>.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.OutputStream.#ctor(System.IO.Stream,GameBox.Console.Output.OutputOptions,GameBox.Console.Formatter.IOutputFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Output.OutputStream"/> class.
            </summary>
            <param name="stream">The given stream resources.</param>
            <param name="options">The output option.</param>
            <param name="formatter">Output formatter instance (null to use default <see cref="T:GameBox.Console.Formatter.OutputFormatter"/>).</param>
        </member>
        <member name="P:GameBox.Console.Output.OutputStream.Stream">
            <summary>
            Gets the stream attached to this <see cref="T:GameBox.Console.Output.OutputStream"/> instance.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.OutputStream.SetStream(System.IO.Stream)">
            <summary>
            Sets the stream attached to this <see cref="T:GameBox.Console.Output.OutputStream"/> instance.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:GameBox.Console.Output.OutputStream.HasDecoratedSupport">
            <summary>
            Returns true if the stream supports colorization.
            </summary>
            <returns>Whether the cli is support decorated.</returns>
        </member>
        <member name="M:GameBox.Console.Output.OutputStream.Write(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Output.OutputStringBuilder">
            <summary>
            <see cref="T:GameBox.Console.Output.OutputStringBuilder"/> can write messages to the <see cref="T:System.Text.StringBuilder"/>.
            </summary>
        </member>
        <member name="F:GameBox.Console.Output.OutputStringBuilder.builder">
            <summary>
            The string builder.
            </summary>
        </member>
        <member name="M:GameBox.Console.Output.OutputStringBuilder.#ctor(GameBox.Console.Output.OutputOptions,GameBox.Console.Formatter.IOutputFormatter)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Output.OutputStringBuilder"/> class.
            </summary>
            <param name="options">The output option.</param>
            <param name="formatter">Output formatter instance (null to use default <see cref="T:GameBox.Console.Formatter.OutputFormatter"/>).</param>
        </member>
        <member name="M:GameBox.Console.Output.OutputStringBuilder.Fetch">
            <summary>
            Empties string builder and returns its content.
            </summary>
            <returns>The written string.</returns>
        </member>
        <member name="M:GameBox.Console.Output.OutputStringBuilder.Write(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Policy.Configure.ConfigureAnsi">
            <summary>
            The console ansi output configure.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Configure.ConfigureAnsi.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Policy.Configure.ConfigureEncoding">
            <summary>
            The encoding configure policy.
            </summary>
        </member>
        <member name="F:GameBox.Console.Policy.Configure.ConfigureEncoding.application">
            <summary>
            The console application instance.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Configure.ConfigureEncoding.#ctor(GameBox.Console.Application)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Policy.Configure.ConfigureEncoding"/> class.
            </summary>
            <param name="application">The console application.</param>
        </member>
        <member name="M:GameBox.Console.Policy.Configure.ConfigureEncoding.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Policy.Configure.ConfigureInteractive">
            <summary>
            The console interactive configure.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Configure.ConfigureInteractive.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Policy.Configure.ConfigureVerbosity">
            <summary>
            The console log verbosity configure.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Configure.ConfigureVerbosity.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Policy.Configure.IConfigurePolicy">
            <summary>
            <see cref="T:GameBox.Console.Policy.Configure.IConfigurePolicy"/> is the interface implemented by all configure policy classes.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Configure.IConfigurePolicy.Execute(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Execute the configure policy.
            </summary>
            <param name="input">The standard input instance.</param>
            <param name="output">The standard output instance.</param>
        </member>
        <member name="T:GameBox.Console.Policy.Render.RenderException">
            <summary>
            Default exception render.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Render.RenderException.Render(System.Exception,GameBox.Console.Output.IOutput)">
            <summary>
            Renders a caught exception.
            </summary>
            <param name="exception">The exception.</param>
            <param name="output">The standard error instance.</param>
        </member>
        <member name="M:GameBox.Console.Policy.Render.RenderException.SplitStringByWidth(System.String,System.Int32)">
            <summary>
            Split the specified string into multiple lines based on width.
            </summary>
            <param name="input">The specified string.</param>
            <param name="width">The width.</param>
            <returns>The multiple lines.</returns>
        </member>
        <member name="M:GameBox.Console.Policy.Render.RenderException.ParseStackTrace(System.Exception)">
            <summary>
            Parse the stack trace from exception.
            </summary>
            <param name="exception">The exception.</param>
            <returns>An array of stack trace.</returns>
        </member>
        <member name="T:GameBox.Console.Policy.Render.RenderException.StackTrace">
            <summary>
            The stack trace.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.StackTrace.FilePath">
            <summary>
            Gets or sets the file path.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.StackTrace.ClassName">
            <summary>
            Gets or sets the class name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.StackTrace.Namespace">
            <summary>
            Gets or sets the namespace name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.StackTrace.MethodName">
            <summary>
            Gets or sets the method name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.StackTrace.Parameters">
            <summary>
            Gets or sets the method parameters.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.StackTrace.Line">
            <summary>
            Gets or sets the line. -1 means unknow.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.StackTrace.Fallback">
            <summary>
            Gets or sets content for fallback when parsing fails.
            </summary>
        </member>
        <member name="T:GameBox.Console.Policy.Render.RenderException.MethodInfo">
            <summary>
            The method info parser.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Render.RenderException.MethodInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Policy.Render.RenderException.MethodInfo"/> class.
            </summary>
            <param name="method">The method info.</param>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.MethodInfo.ClassName">
            <summary>
            Gets the classname.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.MethodInfo.Namespace">
            <summary>
            Gets the namespace name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.MethodInfo.MethodName">
            <summary>
            Gets the method name.
            </summary>
        </member>
        <member name="P:GameBox.Console.Policy.Render.RenderException.MethodInfo.Parameters">
            <summary>
            Gets the parameter list.
            </summary>
        </member>
        <member name="M:GameBox.Console.Policy.Render.RenderException.MethodInfo.CreateUnableParseException(System.String)">
            <summary>
            Create a new unable parse exception.
            </summary>
            <param name="method">The method string.</param>
            <returns>The exception instance.</returns>
        </member>
        <member name="M:GameBox.Console.Policy.Render.RenderException.MethodInfo.Parse(System.String)">
            <summary>
            Parse the method info.
            </summary>
            <param name="method">The method string.</param>
        </member>
        <member name="T:GameBox.Console.Process.ExtensionsProcess">
            <summary>
            The process extensions method.
            </summary>
        </member>
        <member name="M:GameBox.Console.Process.ExtensionsProcess.KillTree(System.Diagnostics.Process,System.Int32)">
            <summary>
            Kill the process tree.
            </summary>
        </member>
        <member name="T:GameBox.Console.Process.IProcessExecutor">
            <summary>
            Represents a command line process executor.
            </summary>
        </member>
        <member name="M:GameBox.Console.Process.IProcessExecutor.Execute(System.String,System.String[]@,System.String[]@,System.String)">
            <summary>
            Executes the given command with command line.
            </summary>
            <param name="command">The command that will be executed.</param>
            <param name="stdout">An array of output from the command.</param>
            <param name="stderr">An array of error output from the command.</param>
            <param name="cwd">Specify the execution path of the command.</param>
            <returns>The return status of the executed command.</returns>
        </member>
        <member name="T:GameBox.Console.Process.NativeMethodsShared">
            <summary>
            Interop methods.
            </summary>
        </member>
        <member name="P:GameBox.Console.Process.NativeMethodsShared.IsLinux">
            <summary>
            Gets a value indicating whether if we are running under Linux.
            </summary>
        </member>
        <member name="P:GameBox.Console.Process.NativeMethodsShared.IsBSD">
            <summary>
            Gets a value indicating whether if we are running under flavor of BSD (NetBSD, OpenBSD, FreeBSD).
            </summary>
        </member>
        <member name="P:GameBox.Console.Process.NativeMethodsShared.IsOSX">
            <summary>
            Gets a value indicating whether if we are running under Mac OSX.
            </summary>
        </member>
        <member name="P:GameBox.Console.Process.NativeMethodsShared.IsUnixLike">
            <summary>
            Gets a value indicating whether if we are running under a Unix-like system (Mac, Linux, etc.).
            </summary>
        </member>
        <member name="P:GameBox.Console.Process.NativeMethodsShared.IsWindows">
            <summary>
            Gets a value indicating whether if we are running under some version of Windows.
            </summary>
        </member>
        <member name="M:GameBox.Console.Process.NativeMethodsShared.KillTree(System.Int32)">
            <summary>
            Kills the specified process by id and all of its children recursively.
            </summary>
        </member>
        <member name="M:GameBox.Console.Process.NativeMethodsShared.GetChildProcessIds(System.Int32,System.DateTime)">
            <summary>
            Returns an array of all the immediate child processes by id.
            NOTE: The IntPtr in the tuple is the handle of the child process.  CloseHandle MUST be called on this.
            </summary>
        </member>
        <member name="M:GameBox.Console.Process.NativeMethodsShared.GetParentProcessId(System.Int32)">
            <summary>
            Returns the parent process id for the specified process.
            Returns zero if it cannot be gotten for some reason.
            </summary>
        </member>
        <member name="T:GameBox.Console.Process.ProcessExecutor">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Process.ProcessExecutor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Process.ProcessExecutor"/> class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Process.ProcessExecutor.Timeout">
            <summary>
            Gets or sets the milliseconds of timeout.
            </summary>
        </member>
        <member name="M:GameBox.Console.Process.ProcessExecutor.Escape(System.String)">
            <summary>
            Escapes a string to be used as a shell argument.
            </summary>
            <param name="argument">The argument that will be escaped.</param>
            <returns>The escaped argument.</returns>
        </member>
        <member name="M:GameBox.Console.Process.ProcessExecutor.Execute(System.String,System.String[]@,System.String[]@,System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Process.ProcessExecutor.CreateShellProcess">
            <summary>
            Create a new process instance.
            </summary>
            <returns>The process instance.</returns>
        </member>
        <member name="M:GameBox.Console.Process.ProcessExecutor.GetShellPath">
            <summary>
            Returns the name of the shell to the operating system.
            </summary>
            <returns>The name of the shell.</returns>
        </member>
        <member name="M:GameBox.Console.Process.ProcessExecutor.GetShellCommand(System.String)">
            <summary>
            Returns the shell command argument.
            </summary>
            <param name="command">The command.</param>
            <returns>The shell command.</returns>
        </member>
        <member name="T:GameBox.Console.Question.Question">
            <summary>
            Represents a Question.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.Question.question">
            <summary>
            The question title.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.Question.defaultValue">
            <summary>
            The question default value.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.Question.autocompleterValues">
            <summary>
            An array values for the autocompleter.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.Question.validator">
            <summary>
            The validator for question.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.Question.normalizer">
            <summary>
            The normalizer for question.
            </summary>
        </member>
        <member name="M:GameBox.Console.Question.Question.#ctor(System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Question.Question"/> class.
            </summary>
            <param name="question">The question title.</param>
            <param name="defaultValue">The question default value.</param>
        </member>
        <member name="P:GameBox.Console.Question.Question.IsPassword">
            <summary>
            Gets a value indicating whether the input is password style.
            </summary>
        </member>
        <member name="P:GameBox.Console.Question.Question.HasPasswordFallback">
            <summary>
            Gets a value indicating whether supported to fallback on non-password question if the response can not be password.
            </summary>
        </member>
        <member name="P:GameBox.Console.Question.Question.MaxAttempts">
            <summary>
            Gets the max attempts.
            </summary>
        </member>
        <member name="M:GameBox.Console.Question.Question.GetQuestion">
            <summary>
            Gets the question title.
            </summary>
            <returns>The question title.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.GetDefault">
            <summary>
            Gets the question default value.
            </summary>
            <returns>The question default value.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.SetPassword(System.Boolean)">
            <summary>
            Sets whether the user response must be password style or not.
            </summary>
            <param name="password">Whether is password.</param>
        </member>
        <member name="M:GameBox.Console.Question.Question.SetPasswordFallback(System.Boolean)">
            <summary>
            Sets whether to fallback on non-password question if the response can not be password.
            </summary>
            <param name="fallback">Whether to fallback on non-password question.</param>
            <returns>The <see cref="T:GameBox.Console.Question.Question"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.GetAutocompleterValues">
            <summary>
            Gets the autocompleter value.
            </summary>
            <returns>The autocompleter value.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.SetAutocompleterValues(GameBox.Console.Util.Mixture)">
            <summary>
            Sets values for the autocompleter.
            </summary>
            <param name="value">The autocompleter.</param>
            <returns>The question instance.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.SetValidator(System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture})">
            <summary>
            Sets a validator for the question.
            </summary>
            <param name="validator">The validator.</param>
            <returns>The question instance.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.GetValidator">
            <summary>
            Gets the validator for the question.
            </summary>
            <returns>The validator.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.SetNormalizer(System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture})">
            <summary>
            Sets a normalizer for the response.
            </summary>
            <param name="normalizer">The normalizer.</param>
            <returns>The question instance.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.GetNormalizer">
            <summary>
            Gets a normalizer for the question.
            </summary>
            <returns>The normalizer.</returns>
        </member>
        <member name="M:GameBox.Console.Question.Question.SetMaxAttempts(System.Int32)">
            <summary>
            Sets the maximum number of attempts.
            </summary>
            <param name="attempts">0 means an unlimited number of attempts.</param>
            <returns>The question instance.</returns>
        </member>
        <member name="T:GameBox.Console.Question.QuestionChoice">
            <summary>
            Represents a choice question.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.QuestionChoice.Separator">
            <summary>
            The multiselect separator.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.QuestionChoice.choices">
            <summary>
            An array of the choices.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.QuestionChoice.prompt">
            <summary>
            The prompt for choices.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.QuestionChoice.errorMessage">
            <summary>
            The error message.
            </summary>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.#ctor(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[],GameBox.Console.Util.Mixture)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Question.QuestionChoice"/> class.
            </summary>
            <param name="question">The question message.</param>
            <param name="choices">The choices list.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.#ctor(System.String,System.String[],GameBox.Console.Util.Mixture)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Question.QuestionChoice"/> class.
            </summary>
            <param name="question">The question message.</param>
            <param name="choices">The choices list.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="P:GameBox.Console.Question.QuestionChoice.IsMultiselect">
            <summary>
            Gets a value indicating whether a multi choice question.
            </summary>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.GetChoices">
            <summary>
            Returns available choices.
            </summary>
            <returns>The available choices.</returns>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.GetPrompt">
            <summary>
            Gets the prompt for choices.
            </summary>
            <returns>Returns the prompt for choices.</returns>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.SetPrompt(System.String)">
            <summary>
            Sets the prompt for choices.
            </summary>
            <param name="prompt">The prompt for choices.</param>
            <returns>The question instance.</returns>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.SetMultiselect(System.Boolean)">
            <summary>
            Sets whether a multi choice question.
            </summary>
            <param name="isMultiselect">Whether a multi choice question.</param>
            <returns>The question instance.</returns>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.SetErrorMessage(System.String)">
            <summary>
            Sets the error message for invalid values.
            </summary>
            <remarks>The error message has a string placeholder ({0}) for the invalid value.</remarks>
            <param name="message">The error message.</param>
            <returns>The question instance.</returns>
        </member>
        <member name="M:GameBox.Console.Question.QuestionChoice.GetDefaultValidator">
            <summary>
            Gets the default validator.
            </summary>
            <returns>Returns the default validator.</returns>
        </member>
        <member name="T:GameBox.Console.Question.QuestionConfirmation">
            <summary>
            Represents a yes/no question.
            </summary>
        </member>
        <member name="F:GameBox.Console.Question.QuestionConfirmation.trueAnswerRegex">
            <summary>
            A regex to match the "yes" answer.
            </summary>
        </member>
        <member name="M:GameBox.Console.Question.QuestionConfirmation.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Question.QuestionConfirmation"/> class.
            </summary>
            <param name="question">The question title.</param>
            <param name="defaultValue">The question default value.</param>
            <param name="trueAnswerRegex">A regex to match the "yes" answer.</param>
        </member>
        <member name="M:GameBox.Console.Question.QuestionConfirmation.DefaultNormalizer(GameBox.Console.Util.Mixture)">
            <summary>
            The default answer normalizer.
            </summary>
            <param name="value">The answer value.</param>
            <returns>The normalize value.</returns>
        </member>
        <member name="T:GameBox.Console.Style.AbstractStyleOutput">
            <summary>
            Decorates output to add console style guide helpers.
            </summary>
        </member>
        <member name="F:GameBox.Console.Style.AbstractStyleOutput.output">
            <summary>
            The std output instance.
            </summary>
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.#ctor(GameBox.Console.Output.IOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Style.AbstractStyleOutput"/> class.
            </summary>
            <param name="output">The std output instance.</param>
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.Options">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.Formatter">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.IsDecorated">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.IsQuiet">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.IsNormal">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.IsVerbose">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.IsVeryVerbose">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.IsDebug">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Style.AbstractStyleOutput.Encoding">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Title(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Section(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Comment(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Listing(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Text(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Success(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Warning(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Note(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Caution(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Ask(System.String,GameBox.Console.Util.Mixture,System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.AskPassword(System.String,System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.AskConfirm(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.AskChoice(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[],GameBox.Console.Util.Mixture,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.NewLine(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.ProgressBegin(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.ProcessAdvance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.ProgressEnd">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.Write(System.String,System.Boolean,GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.WriteLine(System.String,GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.SetVerbosity(GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.SetDecorated(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.SetOptions(GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.SetFormatter(GameBox.Console.Formatter.IOutputFormatter)">
            <summary>
            Set the message formatter.
            </summary>
            <param name="formatter">The foramtter.</param>
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.CreateProgressBar(System.Int32)">
            <summary>
            Create a new <see cref="T:GameBox.Console.Helper.ProgressBar"/> instance.
            </summary>
            <param name="maxSteps">The max steps.(0 if unknown).</param>
            <returns>The <see cref="T:GameBox.Console.Helper.ProgressBar"/> instance.</returns>
        </member>
        <member name="M:GameBox.Console.Style.AbstractStyleOutput.GetErrorOutput">
            <summary>
            Gets the error output.
            </summary>
            <returns>The error output.</returns>
        </member>
        <member name="T:GameBox.Console.Style.ExtendStyle">
            <summary>
            <see cref="T:GameBox.Console.Style.IStyle"/> extend method.
            </summary>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.Text(GameBox.Console.Style.IStyle,System.String[])">
            <inheritdoc cref="M:GameBox.Console.Style.IStyle.Text(System.String)"/>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.Comment(GameBox.Console.Style.IStyle,System.String[])">
            <inheritdoc cref="M:GameBox.Console.Style.IStyle.Comment(System.String)"/>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.Success(GameBox.Console.Style.IStyle,System.String[])">
            <inheritdoc cref="M:GameBox.Console.Style.IStyle.Success(System.String)"/>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.Error(GameBox.Console.Style.IStyle,System.String[])">
            <inheritdoc cref="M:GameBox.Console.Style.IStyle.Error(System.String)"/>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.Warning(GameBox.Console.Style.IStyle,System.String[])">
            <inheritdoc cref="M:GameBox.Console.Style.IStyle.Warning(System.String)"/>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.Note(GameBox.Console.Style.IStyle,System.String[])">
            <inheritdoc cref="M:GameBox.Console.Style.IStyle.Note(System.String)"/>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.Caution(GameBox.Console.Style.IStyle,System.String[])">
            <inheritdoc cref="M:GameBox.Console.Style.IStyle.Caution(System.String)"/>
        </member>
        <member name="M:GameBox.Console.Style.ExtendStyle.AskChoice(GameBox.Console.Style.IStyle,System.String,System.String[],GameBox.Console.Util.Mixture,System.Int32)">
            <summary>
            Asks a choice question.
            </summary>
            <param name="style"><see cref="T:GameBox.Console.Style.IStyle"/> instance.</param>
            <param name="question">The question title.</param>
            <param name="choices">An array of chocies.</param>
            <param name="defaultValue">The default selected key.</param>
            <param name="maxAttempts">The max attempts. 0 means an unlimited number of attempts.</param>
            <returns>null if the user not input,otherwise is user select choice value.</returns>
        </member>
        <member name="T:GameBox.Console.Style.IStyle">
            <summary>
            Style helpers interface for console output.
            </summary>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Title(System.String)">
            <summary>
            Formats a command title.
            </summary>
            <param name="title">The title message.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Section(System.String)">
            <summary>
            Formats a section title.
            </summary>
            <param name="section">The section message.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Comment(System.String)">
            <summary>
            Formats a comment message.
            </summary>
            <param name="comment">The comment message.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Listing(System.String[])">
            <summary>
            Formats a unordered list.
            </summary>
            <param name="elements">An array of the message list.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Text(System.String)">
            <summary>
            Formats a plain text content.
            </summary>
            <param name="text">The text content.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Success(System.String)">
            <summary>
            Formats a success text content.
            </summary>
            <param name="text">The success text content.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Error(System.String)">
            <summary>
            Formats a error text content.
            </summary>
            <param name="text">The error text content.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Warning(System.String)">
            <summary>
            Formats a warning text content.
            </summary>
            <param name="text">The warning text content.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Note(System.String)">
            <summary>
            Formats a note text content.
            </summary>
            <param name="text">The note text content.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Caution(System.String)">
            <summary>
            Formats a caution text content.
            </summary>
            <param name="text">The caution text content.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.Ask(System.String,GameBox.Console.Util.Mixture,System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture},System.Int32)">
            <summary>
            Asks a question.
            </summary>
            <param name="question">The question title.</param>
            <param name="defaultValue">The default value.</param>
            <param name="validator">The value validator.</param>
            <param name="maxAttempts">The max attempts. 0 means an unlimited number of attempts.</param>
            <returns>The user input value.</returns>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.AskPassword(System.String,System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture},System.Int32)">
            <summary>
            Asks a question with password field.
            </summary>
            <param name="question">The question title.</param>
            <param name="validator">The value validator.</param>
            <param name="maxAttempts">The max attempts. 0 means an unlimited number of attempts.</param>
            <returns>The user input value.</returns>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.AskConfirm(System.String,System.Boolean)">
            <summary>
            Asks for confirmation.
            </summary>
            <param name="question">The question title.</param>
            <param name="defaultValue">The default value.</param>
            <returns>True if the user agree, otherwise false.</returns>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.AskChoice(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[],GameBox.Console.Util.Mixture,System.Int32)">
            <summary>
            Asks a choice question.
            </summary>
            <param name="question">The question title.</param>
            <param name="choices">An array of chocies.</param>
            <param name="defaultValue">The default selected key.</param>
            <param name="maxAttempts">The max attempts. 0 means an unlimited number of attempts.</param>
            <returns>null if the user not input,otherwise is user select choice value.</returns>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.NewLine(System.Int32)">
            <summary>
            Add newline(s).
            </summary>
            <param name="count">The number of newlines.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.ProgressBegin(System.Int32)">
            <summary>
            Starts the progress output.
            </summary>
            <param name="maxStep">Maximum steps (0 if unknown).</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.ProcessAdvance(System.Int32)">
            <summary>
            Advances the progress output <paramref name="steps"/> steps.
            </summary>
            <param name="steps">Number of steps to advance.</param>
        </member>
        <member name="M:GameBox.Console.Style.IStyle.ProgressEnd">
            <summary>
            Ended the progress output.
            </summary>
        </member>
        <member name="T:GameBox.Console.Style.StyleDefault">
            <summary>
            Output helper for the Default style guide.
            </summary>
        </member>
        <member name="F:GameBox.Console.Style.StyleDefault.MaxLineLength">
            <summary>
            The console line max length.
            </summary>
        </member>
        <member name="F:GameBox.Console.Style.StyleDefault.lineLength">
            <summary>
            The console line length(width).
            </summary>
        </member>
        <member name="F:GameBox.Console.Style.StyleDefault.input">
            <summary>
            The std input instance.
            </summary>
        </member>
        <member name="F:GameBox.Console.Style.StyleDefault.outputBuffered">
            <summary>
            The output buffered.
            </summary>
        </member>
        <member name="F:GameBox.Console.Style.StyleDefault.helperQuestion">
            <summary>
            The question helper.
            </summary>
        </member>
        <member name="F:GameBox.Console.Style.StyleDefault.progressBar">
            <summary>
            The progress bar.
            </summary>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.#ctor(GameBox.Console.Input.IInput,GameBox.Console.Output.IOutput)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Style.StyleDefault"/> class.
            </summary>
            <param name="input">The std input instance.</param>
            <param name="output">The std output instance.</param>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Title(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Section(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Comment(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Listing(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Text(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Success(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Error(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Warning(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Note(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Caution(System.String)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Ask(System.String,GameBox.Console.Util.Mixture,System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.AskPassword(System.String,System.Func{GameBox.Console.Util.Mixture,GameBox.Console.Util.Mixture},System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.AskConfirm(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.AskChoice(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[],GameBox.Console.Util.Mixture,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.ProgressBegin(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.ProcessAdvance(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.ProgressEnd">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Block(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:GameBox.Console.Style.StyleDefault.Block(System.String[],System.String,System.String,System.String,System.Boolean,System.Boolean)"/>
            <param name="message">The text content.</param>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Block(System.String[],System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:GameBox.Console.Style.StyleDefault.CreateBlock(System.String[],System.String,System.String,System.String,System.Boolean,System.Boolean)"/>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Write(System.String,System.Boolean,GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.Write(System.String[],System.Boolean,GameBox.Console.Output.OutputOptions)">
            <summary>
            Writes a message to the output.
            </summary>
            <param name="messages">An array of the messages.</param>
            <param name="newLine">Whether to add a newline.</param>
            <param name="options">A bitmask of options. <see cref="F:GameBox.Console.Output.OutputOptions.None"/> is considered the same as <see cref="F:GameBox.Console.Output.OutputOptions.OutputNormal"/> | <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityNormal"/>.</param>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.WriteLine(System.String,GameBox.Console.Output.OutputOptions)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.WriteLine(System.String[],GameBox.Console.Output.OutputOptions)">
            <summary>
            Writes a message to the output and adds a newline at the end.
            </summary>
            <param name="messages">An array of the messages.</param>
            <param name="options">A bitmask of options. <see cref="F:GameBox.Console.Output.OutputOptions.None"/> is considered the same as <see cref="F:GameBox.Console.Output.OutputOptions.OutputNormal"/> | <see cref="F:GameBox.Console.Output.OutputOptions.VerbosityNormal"/>.</param>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.CreateProgressBar(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.AskQuestion(GameBox.Console.Question.Question)">
            <summary>
            Ask a question for user.
            </summary>
            <param name="question">The question.</param>
            <returns>The user answer.</returns>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.SetHelperQuestion(GameBox.Console.Helper.HelperQuestion)">
            <summary>
            Sets an help question instance.
            </summary>
            <param name="helper">The helper instance.</param>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.GetProgressBar">
            <summary>
            Returns the progress bar instance.
            </summary>
            <returns>The progress bar instance.</returns>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.WriteBuffered(System.String,System.Boolean,GameBox.Console.Output.OutputOptions)">
            <inheritdoc cref="M:GameBox.Console.Style.StyleDefault.Write(System.String,System.Boolean,GameBox.Console.Output.OutputOptions)"/>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.AutoPrependBlock">
            <summary>
            Prepend new block if line isn't has NewLine.
            </summary>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.AutoPrependText">
            <summary>
            Prepend new line if last char isn't NewLine.
            </summary>
        </member>
        <member name="M:GameBox.Console.Style.StyleDefault.CreateBlock(System.String[],System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Formats a text as a block of text.
            </summary>
            <param name="messages">An array of message content.</param>
            <param name="type">The block type (added in [] on first line).</param>
            <param name="style">The style to apply to the whole block.</param>
            <param name="prefix">The prefix for the block.</param>
            <param name="padding">Whether to add vertical padding.</param>
            <param name="escape">Whether to escape the message.</param>
            <returns>The block content.</returns>
        </member>
        <member name="T:GameBox.Console.Tester.AbstractTester">
            <summary>
            Base class for tester classes.
            </summary>
        </member>
        <member name="F:GameBox.Console.Tester.AbstractTester.captureStderrSeparately">
            <summary>
            Whether output of stdout and stderr separately available.
            </summary>
        </member>
        <member name="P:GameBox.Console.Tester.AbstractTester.Output">
            <summary>
            Gets the std output instnace.
            </summary>
        </member>
        <member name="P:GameBox.Console.Tester.AbstractTester.Encoding">
            <summary>
            Gets the string encoding.
            </summary>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.OptionStdErrorSeparately(System.Boolean)">
            <summary>
            Make output of stdout and stderr separately available.
            </summary>
            <param name="enable">Whether separately available.</param>
            <returns>The option.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.OptionVerbosity(GameBox.Console.Output.OutputOptions)">
            <summary>
            Sets verbosity option.
            </summary>
            <param name="verbosity">The verbosity version.</param>
            <returns>The verbosity option.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.OptionDecorated(System.Boolean)">
            <summary>
            Sets decorated option.
            </summary>
            <param name="decorated">Whether is decorated the message.</param>
            <returns>The decorated option.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.Interactive(System.Boolean)">
            <summary>
            Sets interactive option.
            </summary>
            <param name="interactive">Whether is interactive.</param>
            <returns>The interactive option.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.GetDisplay(System.Text.Encoding)">
            <summary>
            Gets the std output string.
            </summary>
            <param name="encoding">The string encoding.</param>
            <returns>The std output string.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.GetDisplayError(System.Text.Encoding)">
            <summary>
            Gets the std error string.
            </summary>
            <param name="encoding">The string encoding.</param>
            <returns>The std output string.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.CreateStream(System.String[],System.Text.Encoding)">
            <summary>
            Create an new input stream.
            </summary>
            <param name="inputs">An array of strings representing each input passed to the command input stream.</param>
            <param name="encoding">The string encoding.</param>
            <returns>The input stream.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.CreateStream(System.String[])">
            <summary>
            Create an new input stream.
            </summary>
            <param name="inputs">An array of strings representing each input passed to the command input stream.</param>
            <returns>The input stream.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.AbstractTester.Initialize(GameBox.Console.Util.Mixture[])">
            <summary>
            Initialize the output.
            </summary>
            <param name="options">The options array.</param>
        </member>
        <member name="T:GameBox.Console.Tester.TesterApplication">
            <summary>
            Eases the testing of console applications.
            </summary>
            <remarks>
            This is not a unit test file, so there is no need to
            place it in the test case library.
            </remarks>
        </member>
        <member name="F:GameBox.Console.Tester.TesterApplication.inputs">
            <summary>
            An array of strings representing each input passed to the command input stream.
            </summary>
        </member>
        <member name="M:GameBox.Console.Tester.TesterApplication.#ctor(GameBox.Console.Application)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Tester.TesterApplication"/> class.
            </summary>
            <param name="application">The application instance.</param>
        </member>
        <member name="P:GameBox.Console.Tester.TesterApplication.Application">
            <summary>
            Gets the application instance.
            </summary>
        </member>
        <member name="M:GameBox.Console.Tester.TesterApplication.SetInputs(System.String[])">
            <summary>
            Sets an array of strings representing each input passed to the command input stream.
            </summary>
            <param name="inputs">The array of strings.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.TesterApplication.Run">
            <inheritdoc cref="M:GameBox.Console.Tester.TesterApplication.Run(System.String,GameBox.Console.Util.Mixture[])"/>
        </member>
        <member name="M:GameBox.Console.Tester.TesterApplication.Run(System.String,GameBox.Console.Util.Mixture[])">
            <summary>
            Executes the application.
            </summary>
            <param name="instruction">The instruction argument and option.</param>
            <param name="options">The option with <see cref="T:GameBox.Console.Tester.AbstractTester"/>.</param>
            <returns>The status code.</returns>
        </member>
        <member name="T:GameBox.Console.Tester.TesterCommand">
            <summary>
            Eases the testing of console commands.
            </summary>
        </member>
        <member name="F:GameBox.Console.Tester.TesterCommand.command">
            <summary>
            The test command.
            </summary>
        </member>
        <member name="F:GameBox.Console.Tester.TesterCommand.inputs">
            <summary>
            An array of strings representing each input passed to the command input stream.
            </summary>
        </member>
        <member name="M:GameBox.Console.Tester.TesterCommand.#ctor(GameBox.Console.Command.Command)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Tester.TesterCommand"/> class.
            </summary>
            <param name="command">The test command.</param>
        </member>
        <member name="M:GameBox.Console.Tester.TesterCommand.SetInputs(System.String[])">
            <summary>
            Sets an array of strings representing each input passed to the command input stream.
            </summary>
            <param name="inputs">The array of strings.</param>
            <returns>The current instance.</returns>
        </member>
        <member name="M:GameBox.Console.Tester.TesterCommand.Execute">
            <inheritdoc cref="M:GameBox.Console.Tester.TesterCommand.Execute(System.String,GameBox.Console.Util.Mixture[])"/>
        </member>
        <member name="M:GameBox.Console.Tester.TesterCommand.Execute(System.String,GameBox.Console.Util.Mixture[])">
            <summary>
            Executes the command.
            </summary>
            <param name="instruction">The instruction argument and option.</param>
            <param name="options">The option.</param>
            <returns>The status code.</returns>
        </member>
        <member name="T:GameBox.Console.Util.Hardware">
            <summary>
            Expressed program hardware info.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Hardware.GetMemoryUsage">
            <summary>
            Get the program memory usage.
            </summary>
            <returns>The memory usage.</returns>
        </member>
        <member name="T:GameBox.Console.Util.Arr">
            <summary>
            Array helper.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Merge``1(``0[][])">
            <summary>
            Combine multiple specified arrays into one array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <returns>Returns an merged array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Rand``1(``0[],System.Int32)">
            <summary>
            Get a specified number of random values from a specified array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="number">The specified number.</param>
            <returns>An array of the random value.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Shuffle``1(``0[],System.Nullable{System.Int32})">
            <summary>
            Shuffle the elements in the specified array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="seed">The random seed.</param>
            <returns>Return the disrupted array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Splice``1(``0[]@,System.Int32,System.Nullable{System.Int32},``0[])">
            <summary>
            Removes an element of the specified length from the array. If
            the <paramref name="replaceSource"/> parameter is given, the new
            element is inserted from the <paramref name="start"/> position.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="start">
            Delete the start position of the element.
            <para>If the value is set to a positive number, delete it from the beginning of the trip.</para>
            <para>If the value is set to a negative number, the <paramref name="start"/> absolute value is taken from the back.</para>
            </param>
            <param name="length">
            Number of deleted elements.
            <para>If the value is set to a positive number, then the number of elements is returned。.</para>
            <para>If the value is set to a negative number, then remove the <paramref name="length"/> absolute position from the back to the front to delete.</para>
            <para>If the value is not set, then all elements from the position set by the <paramref name="start"/> parameter to the end of the array are returned.</para>
            </param>
            <param name="replaceSource">An array inserted at the start position.</param>
            <returns>An removed array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Cut``1(``0[]@,System.Int32)">
            <summary>
            Crop the array to the desired position.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="source">The source array.</param>
            <param name="position">Crop range, negative numbers are trimmed from back to front.</param>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Chunk``1(``0[],System.Int32)">
            <summary>
            Divide an array into new array blocks.
            <para>The number of cells in each array is determined by
            the <paramref name="size"/> parameter. The number of cells in the last array may be a few.</para>
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="size">The size of the block.</param>
            <returns>Return an array of the block.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Fill``1(System.Int32,System.Int32,``0,``0[])">
            <summary>
            Fill the array, if the specified array is passed in, it will be filled based on the specified array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="start">The starting index.</param>
            <param name="length">The filling length.</param>
            <param name="value">The filling value.</param>
            <param name="sources">The specified array.</param>
            <returns>Returns an filled array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Remove``1(``0[]@,System.Predicate{``0},System.Boolean)">
            <summary>
            Pass each value of the array to the callback function, if the callback
            function returns true, remove the corresponding element in the array
            and return the removed element.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="predicate">The callback.</param>
            <param name="expected">The predicate expected to removed.</param>
            <returns>Returns an removed array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Filter``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.Boolean)">
            <summary>
            Each value in the source array is passed to the callback function.
            If the callback function is equal to the <paramref name="expected"/>
            value, the current value in the input array is added to the result array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="predicate">The callback.</param>
            <param name="expected">The expected value.</param>
            <returns>Returns an filtered array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Map``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Pass the value of the iterator into the callback function, and the
            value returned by the custom function as the new array value.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <typeparam name="TReturn">The type of return value.</typeparam>
            <param name="source">The source iterator.</param>
            <param name="closure">The closure to process.</param>
            <returns>Returns an new array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Pop``1(``0[]@)">
            <summary>
            Delete the last element in the array and return the deleted element
            as the return value.
            </summary>
            <typeparam name="T">The type of the array.</typeparam>
            <param name="sources">The specified array.</param>
            <returns>Returns removed element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Push``1(``0[]@,``0[])">
            <summary>
            Add one or more elements to the end of the array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="elements">The added elements.</param>
            <returns>Returns the length of the new array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Reduce``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Object,``0,System.String},System.Object)">
            <summary>
            Pass a value from an array to a callback function and return a string.
            <para>The function returns null if the array is empty and the <paramref name="initial"/> parameter is not passed.</para>
            <para>If the <paramref name="initial"/> parameter is specified, the parameter will be treated as the first value
            in the array, and if the array is empty, it will be the final return value (string).</para>
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="closure">The closure process.</param>
            <param name="initial">The initial value.</param>
            <returns>Returnd the processed string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Slice``1(``0[],System.Int32,System.Nullable{System.Int32})">
            <summary>
            Take a value from the array according to the condition and return.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="start">
            Remove the starting position of the element.
            <para>If the value is set to a positive number, it will be taken from the beginning of the trip.</para>
            <para>If the value is set to a negative number, the <paramref name="start"/> absolute value is taken from the back.</para>
            </param>
            <param name="length">
            Returns the length of the array.
            <para>If the value is set to a positive number, then the number of elements is returned。.</para>
            <para>If the value is set to a negative number, then remove the <paramref name="length"/> absolute position from the back to the front to delete.</para>
            <para>If the value is not set, then all elements from the position set by the <paramref name="start"/> parameter to the end of the array are returned.</para>
            </param>
            <returns>Returns an new array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Shift``1(``0[]@)">
            <summary>
            Removed the first element in the array and return the value of the removed element.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <returns>Returns the removed value.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Unshift``1(``0[]@,``0[])">
            <summary>
            Add a new element at the beginning of the array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="elements">The added element.</param>
            <returns>Returns the length of the new array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Reverse``1(``0[],System.Int32,System.Nullable{System.Int32})">
            <summary>
            Return arrays in reverse order.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="start">
            The starting position of the starting element.
            <para>If the value is set to a positive number, it will be taken from the beginning of the trip.</para>
            <para>If the value is set to a negative number, the <paramref name="start"/> absolute value is taken from the back.</para></param>
            <param name="length">
            Returns the length of the array.
            <para>If the value is set to a positive number, then the number of elements is returned。.</para>
            <para>If the value is set to a negative number, then remove the <paramref name="length"/> absolute position from the back to the front to delete.</para>
            <para>If the value is not set, then all elements from the position set by the <paramref name="start"/> parameter to the end of the array are returned.</para>
            </param>
            <returns>Returns inverted array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.IndexOf``1(``0[],``0[])">
            <summary>
            Retrieve the initial element index that matches all matching values from the array.
            If it returns -1, it means that it does not appear.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="source">The specified array.</param>
            <param name="match">The value to match, if there are more than one, only all matches will match.</param>
            <returns>Returning -1 means that the specified value was not retrieved.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.IndexOfAny``1(``0[],``0[])">
            <summary>
            Retrieve the subscript of the specified arbitrary matching value from the array.
            If it returns -1, it means that it does not appear.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="source">The specified array.</param>
            <param name="match">The value to match.Match as long as there is an element match.</param>
            <returns>Returning -1 means that the specified value was not retrieved.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Difference``1(``0[],``0[])">
            <summary>
            Exclude the specified value in the array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The source array.</param>
            <param name="matches">An array of exclude value.</param>
            <returns>Returns an array of processed.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.RemoveAt``1(``0[]@,System.Int32,``0)">
            <summary>
            Remove and return the array element of the specified index.
            <para>If the index is passed a negative number then it will be removed from the end.</para>
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="index">The index of array.</param>
            <param name="defaultValue">Default value if index not found.</param>
            <returns>Returns removed element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Test``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Pass the specified array to the callback test.
            <para>The function returns false only if all elements pass the checker are false.</para>
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="predicate">The callback.</param>
            <returns>True if pass the test.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Arr.Set``1(``0[]@,System.Predicate{``0},``0)">
            <summary>
            Finds the specified element in the specified array, and replaces it with a substitute value if found,
            otherwise adds a replacement value at the end of the specified array.
            </summary>
            <typeparam name="T">The type of array.</typeparam>
            <param name="sources">The specified array.</param>
            <param name="predicate">The callback to find element.</param>
            <param name="value">The replacement value.</param>
        </member>
        <member name="T:GameBox.Console.Util.Guard">
            <summary>
            Guard the code.
            </summary>
        </member>
        <member name="T:GameBox.Console.Util.Guard.ExtendException">
            <summary>
            Indicates an extended exception factory.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception instance.</param>
            <param name="state">The user object.</param>
            <returns>An exception instance.</returns>
        </member>
        <member name="P:GameBox.Console.Util.Guard.That">
            <summary>
            Gets the singleton instance of the Guard functionality.
            </summary>
            <remarks>Users can use this to plug-in custom assertions through csharp extension methods.</remarks>
        </member>
        <member name="M:GameBox.Console.Util.Guard.Requires``1(System.Boolean,System.String,System.Exception,System.Object)">
            <summary>
            Verifies a condition and throws an exception if the condition of the contract fails.
            </summary>
            <typeparam name="TException">Exception triggered when validation fails.</typeparam>
            <param name="condition">The condition of the contract.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
            <param name="state">State will be passed to the registered exception build factory.</param>
        </member>
        <member name="M:GameBox.Console.Util.Guard.Requires(System.Type,System.Boolean,System.String,System.Exception,System.Object)">
            <summary>
            Verifies a condition and throws an exception if the condition of the contract fails.
            </summary>
            <param name="exception">Exception triggered when validation fails.</param>
            <param name="condition">The condition of the contract.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
            <param name="state">State will be passed to the registered exception build factory.</param>
        </member>
        <member name="M:GameBox.Console.Util.Guard.ParameterNotNull(System.Object,System.String,System.String,System.Exception)">
            <summary>
            The verification parameter is not Null.
            </summary>
            <param name="argumentValue">The parameter value.</param>
            <param name="argumentName">The parameter name.</param>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
        </member>
        <member name="M:GameBox.Console.Util.Guard.Extend``1(GameBox.Console.Util.Guard.ExtendException)">
            <summary>
            Extend an exception generation factory.
            </summary>
            <typeparam name="T">The type of exception.</typeparam>
            <param name="factory">The exception factory.</param>
        </member>
        <member name="M:GameBox.Console.Util.Guard.Extend(System.Type,GameBox.Console.Util.Guard.ExtendException)">
            <summary>
            Extend an exception generation factory.
            </summary>
            <param name="exception">The type of exception.</param>
            <param name="factory">The exception factory.</param>
        </member>
        <member name="T:GameBox.Console.Util.InternalHelper">
            <summary>
            Represents an internal generic helper class.
            </summary>
        </member>
        <member name="T:GameBox.Console.Util.SortSet`2">
            <summary>
            Represents an ordered set, implemented by a jump list.
            </summary>
            <typeparam name="TElement">The element type.</typeparam>
            <typeparam name="TScore">The score type.</typeparam>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.#ctor(System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Util.SortSet`2"/> class.
            </summary>
            <param name="probable">Probability coefficient of possible number of level(0-1).</param>
            <param name="maxLevel">The max level.</param>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.#ctor(System.Collections.Generic.IComparer{`1},System.Double,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Util.SortSet`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
            <param name="probable">Probability coefficient of possible number of level(0-1).</param>
            <param name="maxLevel">The max level.</param>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.Count">
            <summary>
            Gets the element count.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.Item(System.Int32)">
            <summary>
            Get the element of the specified ranking.
            </summary>
            <param name="rank">The ranking(0 is the bottom).</param>
            <returns>The element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Clear">
            <summary>
            Clear the <see cref="T:GameBox.Console.Util.SortSet`2"/>.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetIterator(System.Boolean)">
            <summary>
            Get <see cref="T:GameBox.Console.Util.SortSet`2"/> iterator.
            </summary>
            <param name="forward">True if iterator element forward.</param>
            <returns>Returns iterator instance.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.System#Collections#Generic#IEnumerable{TElement}#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.ToArray">
            <summary>
            Convert to array.
            </summary>
            <returns>An element array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.First">
            <summary>
            Gets the first element.
            </summary>
            <returns>The first element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Last">
            <summary>
            Gets the last element.
            </summary>
            <returns>The last element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Shift">
            <summary>
            Remove and return the elements at the head.
            </summary>
            <returns>The first element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Pop">
            <summary>
            Remove and return the elements at the end.
            </summary>
            <returns>The last element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Add(`0,`1)">
            <summary>
            Add a new record in sortset.
            </summary>
            <param name="element">The element.</param>
            <param name="score">The score.</param>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Contains(`0)">
            <summary>
            Whether is contains the specided element.
            </summary>
            <param name="element">The element.</param>
            <returns>True if contains the specided element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetScore(`0)">
            <summary>
            Gets the element's score.
            </summary>
            <param name="element">The element.</param>
            <returns>The element's score.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetRangeCount(`1,`1)">
            <summary>
            Get the number of elements in the specified score range.
            </summary>
            <param name="start">The start score.(contain).</param>
            <param name="end">The end score.(contain).</param>
            <returns>The number of elements in the score range.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Remove(`0)">
            <summary>
            Remove an element from the sortset, return false if the element does not exist.
            </summary>
            <param name="element">The element.</param>
            <returns>Whether is removed the element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.RemoveRangeByRank(System.Int32,System.Int32)">
            <summary>
            Remove elements from the rank range.
            </summary>
            <param name="startRank">The start rank.(contains, 0 bottom).</param>
            <param name="stopRank">The end rank.(contains, 0 bottom).</param>
            <returns>Returns the removed elements count.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.RemoveRangeByScore(`1,`1)">
            <summary>
            Remove elements from the score range.
            </summary>
            <param name="startScore">The start score.（contains）.</param>
            <param name="stopScore">The end score.（contains）.</param>
            <returns>Returns removed elements count.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetRank(`0)">
            <summary>
            Get specific element rank.
            </summary>
            <param name="element">The specific element.</param>
            <returns>Returns the element rank(0 bottom) -1 means not found element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetRevRank(`0)">
            <summary>
            Get the reverse ranking of the specified element.
            </summary>
            <param name="element">The specified element.</param>
            <returns>The element's rank(0 bottom)-1 means not found element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetElementRangeByRank(System.Int32,System.Int32)">
            <summary>
            Get the elements in the ranking range.
            </summary>
            <param name="startRank">The start rank(contains).</param>
            <param name="stopRank">The stop rank(contains).</param>
            <returns>An array of the elements.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetElementRangeByScore(`1,`1)">
            <summary>
            Get the elements in the score range.
            </summary>
            <param name="startScore">The start score（contains）.</param>
            <param name="stopScore">The end score（contains）.</param>
            <returns>An array of the elements.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetElementByRank(System.Int32)">
            <summary>
            Get element by rank.
            </summary>
            <param name="rank">The rank(0 bottom).</param>
            <returns>The element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetElementByRevRank(System.Int32)">
            <summary>
            Get element by reverse rank.
            </summary>
            <param name="rank">The rank.(0 bottom).</param>
            <returns>The element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.AddElement(`0,`1)">
            <summary>
            Add an element in the sortset.
            </summary>
            <param name="element">The element.</param>
            <param name="score">The score.</param>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Remove(GameBox.Console.Util.SortSet{`0,`1}.SkipNode,`0@)">
            <summary>
            Remove the skip node.
            </summary>
            <param name="node">The skip node.</param>
            <param name="element">The removed element.</param>
            <returns>Whether is removed the element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Remove(`0,`1)">
            <summary>
            Remove the skip node.
            </summary>
            <param name="element">The element.</param>
            <param name="score">The score.</param>
            <returns>Whether is removed the element.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetRank(`0,`1)">
            <summary>
            Get the element rank.
            </summary>
            <param name="element">The element.</param>
            <param name="score">The element score.</param>
            <returns>The element rank.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.IsFindNext(GameBox.Console.Util.SortSet{`0,`1}.SkipNode,`0,`1,System.Int32)">
            <summary>
            Determine if you need to find the next node.
            </summary>
            <param name="node">The skip not.</param>
            <param name="element">The element.</param>
            <param name="score">The element score.</param>
            <param name="level">The level.</param>
            <returns>True if find next.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.DeleteNode(GameBox.Console.Util.SortSet{`0,`1}.SkipNode,GameBox.Console.Util.SortSet{`0,`1}.SkipNode[])">
            <summary>
            Delete the skip node.
            </summary>
            <param name="cursor">The skip node.</param>
            <param name="update">The updated node list.</param>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.GetRandomLevel">
            <summary>
            Get the rand level.
            </summary>
            <returns>The rand level.</returns>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Compare(`1,`1)">
            <summary>
            Compare left and right values.
            </summary>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>Return a value indicating which value is larger.</returns>
        </member>
        <member name="T:GameBox.Console.Util.SortSet`2.Iterator">
            <summary>
            The default iterator.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.SortSet`2.Iterator.collection">
            <summary>
            The sorset instance.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.SortSet`2.Iterator.forward">
            <summary>
            Whether to traverse from the forward.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.SortSet`2.Iterator.current">
            <summary>
            The current node.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Iterator.#ctor(GameBox.Console.Util.SortSet{`0,`1},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Util.SortSet`2.Iterator"/> struct.
            </summary>
            <param name="collection">The sortset instnace.</param>
            <param name="forward">Whether to traverse from the forward.</param>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.Iterator.Current">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.Iterator.System#Collections#IEnumerator#Current">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Iterator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Iterator.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Iterator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Iterator.MoveNext">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.SortSet`2.Iterator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="T:GameBox.Console.Util.SortSet`2.SkipNode">
            <summary>
            Represents a skip node.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.SkipNode.Element">
            <summary>
            Gets or sets the element.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.SkipNode.Score">
            <summary>
            Gets or sets the score.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.SkipNode.IsDeleted">
            <summary>
            Gets or sets a value indicating whether was deleted.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.SkipNode.Backward">
            <summary>
            Gets or sets the previous node.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.SortSet`2.SkipNode.Level">
            <summary>
            Gets or sets the skip node levels.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.SortSet`2.SkipNode.SkipNodeLevel.Forward">
            <summary>
            The next skip node.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.SortSet`2.SkipNode.SkipNodeLevel.Span">
            <summary>
            The number represents how many nodes are crossed with the next node.
            </summary>
        </member>
        <member name="T:GameBox.Console.Util.Str">
            <summary>
            String helper.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Str.Space">
            <summary>
            The space string.
            </summary>
        </member>
        <member name="T:GameBox.Console.Util.Str.PadType">
            <summary>
            Fill types.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Str.PadType.Both">
            <summary>
            Fill both sides of the string. If it is not even, the right side gets extra padding.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Str.PadType.Left">
            <summary>
            Fill the left side of the string.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Str.PadType.Right">
            <summary>
            Fill the right side of the string.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Str.Method(System.String)">
            <summary>
            Get the method name expressed by the string.
            </summary>
            <param name="pattern">The string will extract method name.</param>
            <returns>The method name.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Is(System.String,System.String)">
            <summary>
            Translate the specified string into an asterisk match expression and test.
            </summary>
            <param name="pattern">The match pattern.</param>
            <param name="value">The match value.</param>
            <returns>True if value is matched.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Is``1(System.String[],``0)">
            <summary>
            Translate the specified string into an asterisk match expression and test.
            <para>Returns true if any match patten matches.</para>
            </summary>
            <typeparam name="T">The type of source array.</typeparam>
            <param name="patterns">The match pattern.</param>
            <param name="value">The match value.</param>
            <returns>True if matches.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.AsteriskWildcard(System.String)">
            <summary>
            Translate the specified string into an asterisk match expression.
            </summary>
            <param name="pattern">The match pattern.</param>
            <returns>Returns processed string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Split(System.String,System.Int32)">
            <summary>
            Splits the string into an array based on length, and the
            last element may be less than the required length.
            </summary>
            <param name="str">The specified string.</param>
            <param name="length">Specify the length of each array element.</param>
            <returns>Returns an array of the string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Repeat(System.String,System.Int32)">
            <summary>
            Repeat the specified number of times the string.
            </summary>
            <param name="str">String that needs to be repeated.</param>
            <param name="num">Number of repetitions.</param>
            <returns>Return the repeated string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Shuffle(System.String,System.Nullable{System.Int32})">
            <summary>
            Shuffle all characters in the string.
            </summary>
            <param name="str">The specified string.</param>
            <param name="seed">The random seed.</param>
            <returns>Returns disrupted string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.SubstringCount(System.String,System.String,System.Int32,System.Nullable{System.Int32},System.StringComparison)">
            <summary>
            Calculate the number of times a substring appears in a string.
            <para>This function does not count overlapping substrings.</para>
            </summary>
            <param name="str">The specified string.</param>
            <param name="substr">The substring.</param>
            <param name="start">The starting position.</param>
            <param name="length">The length to calculate.</param>
            <param name="comparison">The string comparison.</param>
            <returns>Returns the number of times a substring appears. -1 means unable to calculate.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Reverse(System.String)">
            <summary>
            Reverse specified string.
            </summary>
            <param name="str">The specified string.</param>
            <returns>Returns reversed string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Pad(System.Int32,System.String,System.String,GameBox.Console.Util.Str.PadType)">
            <summary>
            Fill the string with the new length.
            </summary>
            <param name="length">The new string length. If the value is less than the original length of the string, no action is taken.</param>
            <param name="str">The string to be filled.</param>
            <param name="padStr">A string to be used for padding. The default is blank.</param>
            <param name="type">
            Fill in which side of the string.
            <para><see cref="F:GameBox.Console.Util.Str.PadType.Both"/>Fill both sides of the string. If not even, get extra padding on the right side.</para>
            <para><see cref="F:GameBox.Console.Util.Str.PadType.Left"/>Fill the left side of the string.</para>
            <para><see cref="F:GameBox.Console.Util.Str.PadType.Right"/>Fill the right side of the string.</para>
            </param>
            <returns>Returns filled string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.After(System.String,System.String)">
            <summary>
            Finds the specified value in the string and returns the rest.
            <para>If not found, return the specified string itself.</para>
            </summary>
            <param name="str">The specified string.</param>
            <param name="search">The search value.</param>
            <returns>The remaining part.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Contains(System.String,System.String[])">
            <summary>
            Determine whether the specified string contains the specified substring.
            <para>Substrings are case sensitive.</para>
            <para></para>
            </summary>
            <param name="str">The specified string.</param>
            <param name="needles">An array of the specified substring.</param>
            <returns>True if contains substring.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Replace(System.String[],System.String,System.String)">
            <summary>
            Replace the match in the specified string.
            </summary>
            <param name="matches">An array of the match string.</param>
            <param name="replace">The replacement value.</param>
            <param name="str">The specified string.</param>
            <returns>Returns the replacement string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replace the first occurrence of a match in the specified string.
            <para>This function is case sensitive.</para>
            </summary>
            <param name="match">The match string.</param>
            <param name="replace">The replacement value.</param>
            <param name="str">The specified string.</param>
            <returns>Returns the replacement string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurrence of a match in the specified string from the back to the front.
            <para>This function is case sensitive.</para>
            </summary>
            <param name="match">The match string.</param>
            <param name="replace">The replacement value.</param>
            <param name="str">The specified string.</param>
            <returns>Returns the replacement string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Random(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Generate a random letter (with case), a string of numbers.
            </summary>
            <param name="length">The length of the generate string.</param>
            <param name="seed">The random seed.</param>
            <returns>The random string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Truncate(System.String,System.Int32,System.Object,System.String)">
            <summary>
            If the length exceeds the given maximum string length, the string is truncated.
            The last character of the truncated string will be replaced with the mission string.
            <para>eg: Str.Truncate("hello world , the sun is shine", 15, Str.Space) => hello world...</para>
            </summary>
            <param name="str">The string to be truncated.</param>
            <param name="length">Truncation length (with default character length).</param>
            <param name="separator">The adjacent separator, if set, truncates the separator position with the length of the truncation length, and uses a regular match if a regular expression is passed.</param>
            <param name="mission">The mission string.</param>
            <returns>Reutrns truncated string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Levenshtein(System.String,System.String)">
            <summary>
            Calculate Levenshtein distance between two strings.
            </summary>
            <param name="a">The string 1.</param>
            <param name="b">The string 2.</param>
            <returns>
            This function returns the Levenshtein-Distance between the two argument
            strings or -1, if one of the argument strings is longer than the limit
            of 255 characters.
            </returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.JoinList(System.String[],System.String)">
            <summary>
            Returns all sequential combination of the given array.
            </summary>
            <remarks>
            v[0] = "hello"
            v[1] = "world"
            var result = Str.JoinList(v, "/");
            result[0] == "hello";
            result[1] == "hello/world";.
            </remarks>
            <param name="sources">The source array.</param>
            <param name="separator">The separator.</param>
            <returns>The sequential combination array.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.JoinList(System.String[],System.Char)">
            <inheritdoc cref="M:GameBox.Console.Util.Str.JoinList(System.String[],System.Char)"/>
        </member>
        <member name="M:GameBox.Console.Util.Str.StripHtml(System.String)">
            <summary>
            Strip HTML from strings.
            </summary>
            <param name="str">The specified string.</param>
            <returns>The stripped string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Width(System.String)">
            <summary>
            Returns the length of a string with mixing different languages.
            </summary>
            <param name="str">The specified string.</param>
            <returns>The length of a string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.Width(System.Char)">
            <summary>
            Returns the length of a string with mixing different languages.
            </summary>
            <param name="c">The specified char.</param>
            <returns>The length of a string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Str.WordWrap(System.String,System.Int32,System.String)">
            <summary>
            Wraps a string to a given number of characters using a string <paramref name="separator"/> character.
            </summary>
            <param name="str">The specified string.</param>
            <param name="width">The max width.</param>
            <param name="separator">The line is broken using the optional <paramref name="separator"/> parameter. default value is : <see cref="P:System.Environment.NewLine"/>.</param>
            <returns>Wrapped string.</returns>
        </member>
        <member name="T:GameBox.Console.Util.StreamExtension">
            <summary>
            The stream extension function.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.StreamExtension.AppendTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Append the source stream to the destination stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="destination">The destination stream.</param>
            <returns>Byte length of transmitted data.</returns>
        </member>
        <member name="M:GameBox.Console.Util.StreamExtension.AppendTo(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Append the source stream to the destination stream.
            </summary>
            <param name="source">The source stream.</param>
            <param name="destination">The destination stream.</param>
            <param name="buffer">The buffer to use.</param>
            <returns>Byte length of transmitted data.</returns>
        </member>
        <member name="M:GameBox.Console.Util.StreamExtension.ToText(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Read the stream's data and convert it to a string.
            </summary>
            <param name="source">The source stream.</param>
            <param name="encoding">The encoding for data.</param>
            <param name="closed">Whether auto closed stream.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:GameBox.Console.Util.StreamExtension.ToStream(System.String,System.Text.Encoding)">
            <summary>
            Convert the specified string to a stream.
            </summary>
            <param name="str">The specified string.</param>
            <param name="encoding">The string encoding.</param>
            <returns>The stream instance.</returns>
        </member>
        <member name="T:GameBox.Console.Util.Mixture">
            <summary>
            <see cref="T:GameBox.Console.Util.Mixture"/> can be implicitly converted to other base types.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.Value.objectValue">
            <summary>
            Save the type of object value by pointer.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.Value.intValue">
            <summary>
            The type of int value.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.Value.floatValue">
            <summary>
            The type of float value.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.Value.doubleValue">
            <summary>
            The type of double value.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.Value.charValue">
            <summary>
            The type of char value.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.Value.boolValue">
            <summary>
            The type of bool value.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.Null">
            <summary>
            The value is null.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.Name">
            <summary>
            The value name.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.mixture">
            <summary>
            The value of mixture.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.arrayLength">
            <summary>
            The length of array item.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.type">
            <summary>
            The original object type.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsNull">
            <summary>
            The original object is null.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsArray">
            <summary>
            The original object is array.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsInt">
            <summary>
            The original object is int.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsString">
            <summary>
            The original object is string.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsBoolean">
            <summary>
            The original object is boolean.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsChar">
            <summary>
            The original object is char.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsFloat">
            <summary>
            The original object is float.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.IsDouble">
            <summary>
            The original object is double.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Mixture.disposed">
            <summary>
            The resource is disposed.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Mixture.Length">
            <summary>
            The mixture length.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor">
            <summary>
             Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Boolean)">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Single)">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Double)">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Char)">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Int32[])">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Boolean[])">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Char[])">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Single[])">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.Double[])">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.#ctor(System.String[])">
            <summary>
            Create a new <see cref="T:GameBox.Console.Util.Mixture"/> Instance.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.GetLength">
            <summary>
            Get the length of mixture.
            If value is array type then return the length of array; otherwise return then value convert to string's length.
            </summary>
            <returns>The length of mixture.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.String)~GameBox.Console.Util.Mixture">
            <summary>
            Convert <see cref="T:System.String"/> to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.String">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Int32)~GameBox.Console.Util.Mixture">
            <summary>
            Convert <see cref="T:System.Int32"/> to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Int32">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Boolean)~GameBox.Console.Util.Mixture">
            <summary>
            Convert <see cref="T:System.Boolean"/> to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Boolean">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Single)~GameBox.Console.Util.Mixture">
            <summary>
            Convert <see cref="T:System.Single"/> to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Single">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Double)~GameBox.Console.Util.Mixture">
            <summary>
            Convert <see cref="T:System.Double"/> to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Double">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Char)~GameBox.Console.Util.Mixture">
            <summary>
            Convert <see cref="T:System.Char"/> to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Char">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Int32[])~GameBox.Console.Util.Mixture">
            <summary>
            Convert int[] to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Int32[]">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to int[].
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Single[])~GameBox.Console.Util.Mixture">
            <summary>
            Convert float[] to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Single[]">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to float[].
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Double[])~GameBox.Console.Util.Mixture">
            <summary>
            Convert double[] to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Double[]">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to double[].
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Char[])~GameBox.Console.Util.Mixture">
            <summary>
            Convert char[] to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Char[]">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to char[].
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.Boolean[])~GameBox.Console.Util.Mixture">
            <summary>
            Convert bool[] to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.Boolean[]">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to bool[].
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(System.String[])~GameBox.Console.Util.Mixture">
            <summary>
            Convert string[] to <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="M:GameBox.Console.Util.Mixture.op_Implicit(GameBox.Console.Util.Mixture)~System.String[]">
            <summary>
            Convert <see cref="T:GameBox.Console.Util.Mixture"/> to string[].
            </summary>
            <param name="content">The source content.</param>
        </member>
        <member name="T:GameBox.Console.Util.MixtureExtend">
            <summary>
            <see cref="T:GameBox.Console.Util.Mixture"/> extension method.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.MixtureExtend.Get(GameBox.Console.Util.Mixture[],System.String)">
            <summary>
            Find the first <see cref="T:GameBox.Console.Util.Mixture"/> object whose name matches in the Mixture array.
            </summary>
            <param name="collection">The mixture array.</param>
            <param name="name">The specified name.</param>
            <returns>The mixture.</returns>
        </member>
        <member name="M:GameBox.Console.Util.MixtureExtend.Get(GameBox.Console.Util.Mixture[],System.String,GameBox.Console.Util.Mixture)">
            <summary>
            Find the first <see cref="T:GameBox.Console.Util.Mixture"/> object whose name matches in the Mixture array.
            </summary>
            <param name="collection">The mixture array.</param>
            <param name="name">The specified name.</param>
            <param name="defaultValue">The default value.</param>
            <returns>The mixture.</returns>
        </member>
        <member name="M:GameBox.Console.Util.MixtureExtend.Has(GameBox.Console.Util.Mixture[],System.String)">
            <summary>
            Whether the specified <see cref="T:GameBox.Console.Util.Mixture"/> object is exists.
            </summary>
            <param name="collection">The mixture array.</param>
            <param name="name">The specified name.</param>
            <returns>True if the specified object is exists.</returns>
        </member>
        <member name="M:GameBox.Console.Util.MixtureExtend.TryGet(GameBox.Console.Util.Mixture[],System.String,GameBox.Console.Util.Mixture@)">
            <summary>
            Test the specified <see cref="T:GameBox.Console.Util.Mixture"/> object is exists. and returns it.
            </summary>
            <param name="collection">The mixture array.</param>
            <param name="name">The specified name.</param>
            <param name="result">The returns result.</param>
            <returns>True if the specified object is exists.</returns>
        </member>
        <member name="T:GameBox.Console.Util.MixtureTypes">
            <summary>
            The type of the original object with <see cref="T:GameBox.Console.Util.Mixture"/>.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.None">
            <summary>
            The original object is null.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.Array">
            <summary>
            The original object is array.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.StringValue">
            <summary>
            The original object is string.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.CharValue">
            <summary>
            The original object is char.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.BoolValue">
            <summary>
            The original object is boolean.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.IntValue">
            <summary>
            The original object is int.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.FloatValue">
            <summary>
            The original object is float.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.MixtureTypes.DoubleValue">
            <summary>
            The original object is double.
            </summary>
        </member>
        <member name="T:GameBox.Console.Util.Terminal">
            <summary>
            The terminal helper.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.process">
            <summary>
            The process instance.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.console">
            <summary>
            Internal console implement.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.#cctor">
            <summary>
            Initializes static members of the <see cref="T:GameBox.Console.Util.Terminal"/> class.
            </summary>
        </member>
        <member name="T:GameBox.Console.Util.Terminal.IConsole">
            <summary>
            The console interface.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.IConsole.Width">
            <summary>
            Gets the width of buffer area.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.IConsole.Height">
            <summary>
            Gets the height of buffer area.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.IConsole.IsInputRedirected">
            <summary>
            Gets a value indicating whether input has been redirected from the standard input stream.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.IConsole.OutputEncoding">
            <summary>
            Gets or sets the encoding the console uses to write output.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.IConsole.InputEncoding">
            <summary>
            Gets or sets the encoding the console uses to read input.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.IConsole.GetStandardOutput">
            <summary>
            Acquires the standard output stream.
            </summary>
            <returns>The standard output strean.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.IConsole.GetStandardError">
            <summary>
            Acquires the standard error stream.
            </summary>
            <returns>The standard error stream.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.IConsole.GetStandardInput">
            <summary>
            Acquires the standard input stream.
            </summary>
            <returns>The standard error stream.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.IConsole.ReadKey(System.Boolean)">
            <summary>
            Obtains the next character or function key pressed by the user.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.Width">
            <summary>
            Gets the width of buffer area.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.Height">
            <summary>
            Gets the height of buffer area.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.IsInputRedirected">
            <summary>
            Gets a value indicating whether input has been redirected from the standard input stream.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.OutputEncoding">
            <summary>
            Gets or sets the encoding the console uses to write output.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.InputEncoding">
            <summary>
            Gets or sets the encoding the console uses to read input.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.GetStandardOutput">
            <summary>
            Acquires the standard output stream.
            </summary>
            <returns>The standard output strean.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.GetStandardError">
            <summary>
            Acquires the standard error stream.
            </summary>
            <returns>The standard error stream.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.GetStandardInput">
            <summary>
            Acquires the standard input stream.
            </summary>
            <returns>The standard error stream.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.GetCommandLineArgs">
            <summary>
            Returns a string array containing the command-line arguments for the current process.
            </summary>
            <returns>An array of the command line arguments.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.SetEnvironmentVariable(System.String,GameBox.Console.Util.Mixture,System.EnvironmentVariableTarget)">
            <summary>
            Creates, modifies, or deletes an environment variable stored in the current process
            or in the Windows operating system registry key reserved for the current user
            or local machine.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="value">The environment variable value.</param>
            <param name="target">Where the variable is saved.</param>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)">
            <summary>
            Retrieves the value of an environment variable from the current process or from
             the Windows operating system registry key for the current user or local machine.
            </summary>
            <param name="variable">The name of the environment variable.</param>
            <param name="target">Where the variable is readed.</param>
            <returns>The environment variable value.</returns>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.RemoveEnvironmentVariable(System.String)">
            <summary>
            Remove the exists variable.
            </summary>
            <param name="variable">The name of the environment variable.</param>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.Execute(System.String)">
            <inheritdoc cref="M:GameBox.Console.Process.IProcessExecutor.Execute(System.String,System.String[]@,System.String[]@,System.String)"/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.Execute(System.String,System.String[]@,System.String)">
            <inheritdoc cref="M:GameBox.Console.Process.IProcessExecutor.Execute(System.String,System.String[]@,System.String[]@,System.String)"/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.Execute(System.String,System.String[]@,System.String[]@,System.String)">
            <inheritdoc cref="M:GameBox.Console.Process.IProcessExecutor.Execute(System.String,System.String[]@,System.String[]@,System.String)"/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.SetProcessExecutor(GameBox.Console.Process.IProcessExecutor)">
            <summary>
            Sets the process executor.
            </summary>
            <param name="process">The process executor instance.</param>
        </member>
        <member name="T:GameBox.Console.Util.Terminal.TerminalNoneConsole">
            <summary>
            System console not supported implement.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.TerminalNoneConsole.output">
            <summary>
            The memory output.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.TerminalNoneConsole.input">
            <summary>
            The memory input stream.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.TerminalNoneConsole.error">
            <summary>
            The memory error stream.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalNoneConsole.Width">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalNoneConsole.Height">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalNoneConsole.OutputEncoding">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalNoneConsole.InputEncoding">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalNoneConsole.IsInputRedirected">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalNoneConsole.GetStandardOutput">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalNoneConsole.GetStandardError">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalNoneConsole.GetStandardInput">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalNoneConsole.ReadKey(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalNoneConsole.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:GameBox.Console.Util.Terminal.TerminalSystemConsole">
            <summary>
            System console implement.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.TerminalSystemConsole.standardOutputStream">
            <summary>
            Standard output stream.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.TerminalSystemConsole.standardInputStream">
            <summary>
            Standard input stream.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.TerminalSystemConsole.standardErrorStream">
            <summary>
            Standard error stream.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Util.Terminal.TerminalSystemConsole"/> class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.Width">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.Height">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.IsInputRedirected">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.OutputEncoding">
            <inheritdoc/>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.InputEncoding">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.GetStandardOutput">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.GetStandardError">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.GetStandardInput">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.ReadKey(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream">
            <summary>
            Wrapped console standard input stream.
            </summary>
        </member>
        <member name="F:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.baseStream">
            <summary>
            The base standard input stream.
            </summary>
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream"/> class.
            </summary>
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.CanRead">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.CanSeek">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.CanWrite">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.Length">
            <inheritdoc />
        </member>
        <member name="P:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.Position">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.Flush">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.SetLength(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:GameBox.Console.Util.Terminal.TerminalSystemConsole.WrappedConsoleStandardInputStream.Dispose(System.Boolean)">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:GameBox.Console.Vendor.LitJson.JsonData.ContainsKey(System.String)">
            <summary>
            Determines whether the json contains an element that has the specified key.
            </summary>
            <param name="key">The key to locate in the json.</param>
            <returns>true if the json contains an element that has the specified key; otherwise, false.</returns>
        </member>
    </members>
</doc>
